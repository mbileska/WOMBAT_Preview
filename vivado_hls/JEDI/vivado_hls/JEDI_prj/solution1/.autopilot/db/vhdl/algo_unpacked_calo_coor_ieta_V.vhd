-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity algo_unpacked_calo_coor_ieta_V is 
    generic(
             DataWidth     : integer := 5; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 252
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          address1      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of algo_unpacked_calo_coor_ieta_V is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
signal address1_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "11001", 1 => "10101", 2 => "10001", 3 => "01101", 4 => "01001", 
    5 => "00101", 6 to 7=> "00001", 8 => "00101", 9 => "01001", 10 => "01101", 
    11 => "10001", 12 => "10101", 13 to 14=> "11001", 15 => "10101", 16 => "10001", 
    17 => "01101", 18 => "01001", 19 => "00101", 20 to 21=> "00001", 22 => "00101", 
    23 => "01001", 24 => "01101", 25 => "10001", 26 => "10101", 27 to 28=> "11001", 
    29 => "10101", 30 => "10001", 31 => "01101", 32 => "01001", 33 => "00101", 
    34 to 35=> "00001", 36 => "00101", 37 => "01001", 38 => "01101", 39 => "10001", 
    40 => "10101", 41 to 42=> "11001", 43 => "10101", 44 => "10001", 45 => "01101", 
    46 => "01001", 47 => "00101", 48 to 49=> "00001", 50 => "00101", 51 => "01001", 
    52 => "01101", 53 => "10001", 54 => "10101", 55 to 56=> "11001", 57 => "10101", 
    58 => "10001", 59 => "01101", 60 => "01001", 61 => "00101", 62 to 63=> "00001", 
    64 => "00101", 65 => "01001", 66 => "01101", 67 => "10001", 68 => "10101", 
    69 to 70=> "11001", 71 => "10101", 72 => "10001", 73 => "01101", 74 => "01001", 
    75 => "00101", 76 to 77=> "00001", 78 => "00101", 79 => "01001", 80 => "01101", 
    81 => "10001", 82 => "10101", 83 to 84=> "11001", 85 => "10101", 86 => "10001", 
    87 => "01101", 88 => "01001", 89 => "00101", 90 to 91=> "00001", 92 => "00101", 
    93 => "01001", 94 => "01101", 95 => "10001", 96 => "10101", 97 to 98=> "11001", 
    99 => "10101", 100 => "10001", 101 => "01101", 102 => "01001", 103 => "00101", 
    104 to 105=> "00001", 106 => "00101", 107 => "01001", 108 => "01101", 109 => "10001", 
    110 => "10101", 111 to 112=> "11001", 113 => "10101", 114 => "10001", 115 => "01101", 
    116 => "01001", 117 => "00101", 118 to 119=> "00001", 120 => "00101", 121 => "01001", 
    122 => "01101", 123 => "10001", 124 => "10101", 125 to 126=> "11001", 127 => "10101", 
    128 => "10001", 129 => "01101", 130 => "01001", 131 => "00101", 132 to 133=> "00001", 
    134 => "00101", 135 => "01001", 136 => "01101", 137 => "10001", 138 => "10101", 
    139 to 140=> "11001", 141 => "10101", 142 => "10001", 143 => "01101", 144 => "01001", 
    145 => "00101", 146 to 147=> "00001", 148 => "00101", 149 => "01001", 150 => "01101", 
    151 => "10001", 152 => "10101", 153 to 154=> "11001", 155 => "10101", 156 => "10001", 
    157 => "01101", 158 => "01001", 159 => "00101", 160 to 161=> "00001", 162 => "00101", 
    163 => "01001", 164 => "01101", 165 => "10001", 166 => "10101", 167 to 168=> "11001", 
    169 => "10101", 170 => "10001", 171 => "01101", 172 => "01001", 173 => "00101", 
    174 to 175=> "00001", 176 => "00101", 177 => "01001", 178 => "01101", 179 => "10001", 
    180 => "10101", 181 to 182=> "11001", 183 => "10101", 184 => "10001", 185 => "01101", 
    186 => "01001", 187 => "00101", 188 to 189=> "00001", 190 => "00101", 191 => "01001", 
    192 => "01101", 193 => "10001", 194 => "10101", 195 to 196=> "11001", 197 => "10101", 
    198 => "10001", 199 => "01101", 200 => "01001", 201 => "00101", 202 to 203=> "00001", 
    204 => "00101", 205 => "01001", 206 => "01101", 207 => "10001", 208 => "10101", 
    209 to 210=> "11001", 211 => "10101", 212 => "10001", 213 => "01101", 214 => "01001", 
    215 => "00101", 216 to 217=> "00001", 218 => "00101", 219 => "01001", 220 => "01101", 
    221 => "10001", 222 => "10101", 223 to 224=> "11001", 225 => "10101", 226 => "10001", 
    227 => "01101", 228 => "01001", 229 => "00101", 230 to 231=> "00001", 232 => "00101", 
    233 => "01001", 234 => "01101", 235 => "10001", 236 => "10101", 237 to 238=> "11001", 
    239 => "10101", 240 => "10001", 241 => "01101", 242 => "01001", 243 => "00101", 
    244 to 245=> "00001", 246 => "00101", 247 => "01001", 248 => "01101", 249 => "10001", 
    250 => "10101", 251 => "11001" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (address1) 
begin
      address1_tmp <= address1;
--synthesis translate_off
      if (CONV_INTEGER(address1) > AddressRange-1) then
           address1_tmp <= (others => '0');
      else 
           address1_tmp <= address1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(address1_tmp)); 
        end if;
    end if;
end process;

end rtl;

