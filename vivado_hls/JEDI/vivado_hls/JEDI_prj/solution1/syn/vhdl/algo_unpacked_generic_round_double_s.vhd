-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity algo_unpacked_generic_round_double_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of algo_unpacked_generic_round_double_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal mask_table_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table_ce0 : STD_LOGIC;
    signal mask_table_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal one_half_table_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal one_half_table_ce0 : STD_LOGIC;
    signal one_half_table_q0 : STD_LOGIC_VECTOR (52 downto 0);
    signal x_read_reg_198 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_read_reg_198_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_fu_72_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_reg_203 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_reg_203_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1019_fu_86_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_209 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_209_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_fu_92_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_215 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_215_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mask_reg_230 : STD_LOGIC_VECTOR (51 downto 0);
    signal one_half_reg_235 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln527_fu_108_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_253_fu_76_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal index_fu_98_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_s_fu_114_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln204_fu_129_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_1_fu_132_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_254_fu_137_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xor_ln1481_fu_141_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_fu_152_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal xs_sig_V_fu_146_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_34_fu_121_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_35_fu_162_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1019_fu_170_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1019_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1019_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln1019_fu_177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_reset_start_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component algo_unpacked_generic_round_double_s_mask_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component algo_unpacked_generic_round_double_s_one_half_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (52 downto 0) );
    end component;



begin
    mask_table_U : component algo_unpacked_generic_round_double_s_mask_table
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table_address0,
        ce0 => mask_table_ce0,
        q0 => mask_table_q0);

    one_half_table_U : component algo_unpacked_generic_round_double_s_one_half_table
    generic map (
        DataWidth => 53,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => one_half_table_address0,
        ce0 => one_half_table_ce0,
        q0 => one_half_table_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_V_reg_203 <= data_V_fu_72_p1;
                data_V_reg_203_pp0_iter1_reg <= data_V_reg_203;
                icmp_ln1019_1_reg_215 <= icmp_ln1019_1_fu_92_p2;
                icmp_ln1019_1_reg_215_pp0_iter1_reg <= icmp_ln1019_1_reg_215;
                icmp_ln1019_reg_209 <= icmp_ln1019_fu_86_p2;
                icmp_ln1019_reg_209_pp0_iter1_reg <= icmp_ln1019_reg_209;
                mask_reg_230 <= mask_table_q0;
                one_half_reg_235 <= one_half_table_q0;
                x_read_reg_198 <= x;
                x_read_reg_198_pp0_iter1_reg <= x_read_reg_198;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_reset_start_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln1019_fu_186_p2 <= (xor_ln1019_fu_181_p2 and icmp_ln1019_1_reg_215_pp0_iter1_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_start_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_start_pp0 <= ap_const_logic_1;
        else 
            ap_reset_start_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        x_read_reg_198_pp0_iter1_reg when (and_ln1019_fu_186_p2(0) = '1') else 
        bitcast_ln1019_fu_177_p1;
    bitcast_ln1019_fu_177_p1 <= select_ln1019_fu_170_p3;
    data_V_1_fu_132_p2 <= std_logic_vector(unsigned(zext_ln204_fu_129_p1) + unsigned(data_V_reg_203_pp0_iter1_reg));
    data_V_fu_72_p1 <= x;
    icmp_ln1019_1_fu_92_p2 <= "1" when (unsigned(tmp_253_fu_76_p4) > unsigned(ap_const_lv11_433)) else "0";
    icmp_ln1019_fu_86_p2 <= "1" when (unsigned(tmp_253_fu_76_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    index_fu_98_p4 <= data_V_fu_72_p1(57 downto 52);
    mask_table_address0 <= zext_ln527_fu_108_p1(6 - 1 downto 0);

    mask_table_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mask_table_ce0 <= ap_const_logic_1;
        else 
            mask_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    one_half_table_address0 <= zext_ln527_fu_108_p1(6 - 1 downto 0);

    one_half_table_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            one_half_table_ce0 <= ap_const_logic_1;
        else 
            one_half_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_34_fu_121_p3 <= (p_Result_s_fu_114_p3 & ap_const_lv63_0);
    p_Result_35_fu_162_p3 <= (tmp_fu_152_p4 & xs_sig_V_fu_146_p2);
    p_Result_s_fu_114_p3 <= data_V_reg_203_pp0_iter1_reg(63 downto 63);
    select_ln1019_fu_170_p3 <= 
        p_Result_34_fu_121_p3 when (icmp_ln1019_reg_209_pp0_iter1_reg(0) = '1') else 
        p_Result_35_fu_162_p3;
    tmp_253_fu_76_p4 <= data_V_fu_72_p1(62 downto 52);
    tmp_254_fu_137_p1 <= data_V_1_fu_132_p2(52 - 1 downto 0);
    tmp_fu_152_p4 <= data_V_1_fu_132_p2(63 downto 52);
    xor_ln1019_fu_181_p2 <= (icmp_ln1019_reg_209_pp0_iter1_reg xor ap_const_lv1_1);
    xor_ln1481_fu_141_p2 <= (mask_reg_230 xor ap_const_lv52_FFFFFFFFFFFFF);
    xs_sig_V_fu_146_p2 <= (xor_ln1481_fu_141_p2 and tmp_254_fu_137_p1);
    zext_ln204_fu_129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(one_half_reg_235),64));
    zext_ln527_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_98_p4),64));
end behav;
