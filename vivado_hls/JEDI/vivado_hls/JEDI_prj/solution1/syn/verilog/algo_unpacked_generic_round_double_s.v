// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module algo_unpacked_generic_round_double_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        x,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [63:0] x;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [5:0] mask_table_address0;
reg    mask_table_ce0;
wire   [51:0] mask_table_q0;
wire   [5:0] one_half_table_address0;
reg    one_half_table_ce0;
wire   [52:0] one_half_table_q0;
reg   [63:0] x_read_reg_198;
wire    ap_block_pp0_stage0_11001;
reg   [63:0] x_read_reg_198_pp0_iter1_reg;
wire   [63:0] data_V_fu_72_p1;
reg   [63:0] data_V_reg_203;
reg   [63:0] data_V_reg_203_pp0_iter1_reg;
wire   [0:0] icmp_ln1019_fu_86_p2;
reg   [0:0] icmp_ln1019_reg_209;
reg   [0:0] icmp_ln1019_reg_209_pp0_iter1_reg;
wire   [0:0] icmp_ln1019_1_fu_92_p2;
reg   [0:0] icmp_ln1019_1_reg_215;
reg   [0:0] icmp_ln1019_1_reg_215_pp0_iter1_reg;
reg   [51:0] mask_reg_230;
reg   [52:0] one_half_reg_235;
wire   [63:0] zext_ln527_fu_108_p1;
wire    ap_block_pp0_stage0;
wire   [10:0] tmp_253_fu_76_p4;
wire   [5:0] index_fu_98_p4;
wire   [0:0] p_Result_s_fu_114_p3;
wire   [63:0] zext_ln204_fu_129_p1;
wire   [63:0] data_V_1_fu_132_p2;
wire   [51:0] tmp_254_fu_137_p1;
wire   [51:0] xor_ln1481_fu_141_p2;
wire   [11:0] tmp_fu_152_p4;
wire   [51:0] xs_sig_V_fu_146_p2;
wire   [63:0] p_Result_34_fu_121_p3;
wire   [63:0] p_Result_35_fu_162_p3;
wire   [63:0] select_ln1019_fu_170_p3;
wire   [0:0] xor_ln1019_fu_181_p2;
wire   [0:0] and_ln1019_fu_186_p2;
wire   [63:0] bitcast_ln1019_fu_177_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_reset_start_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

algo_unpacked_generic_round_double_s_mask_table #(
    .DataWidth( 52 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mask_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mask_table_address0),
    .ce0(mask_table_ce0),
    .q0(mask_table_q0)
);

algo_unpacked_generic_round_double_s_one_half_table #(
    .DataWidth( 53 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
one_half_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(one_half_table_address0),
    .ce0(one_half_table_ce0),
    .q0(one_half_table_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_reg_203 <= data_V_fu_72_p1;
        data_V_reg_203_pp0_iter1_reg <= data_V_reg_203;
        icmp_ln1019_1_reg_215 <= icmp_ln1019_1_fu_92_p2;
        icmp_ln1019_1_reg_215_pp0_iter1_reg <= icmp_ln1019_1_reg_215;
        icmp_ln1019_reg_209 <= icmp_ln1019_fu_86_p2;
        icmp_ln1019_reg_209_pp0_iter1_reg <= icmp_ln1019_reg_209;
        mask_reg_230 <= mask_table_q0;
        one_half_reg_235 <= one_half_table_q0;
        x_read_reg_198 <= x;
        x_read_reg_198_pp0_iter1_reg <= x_read_reg_198;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_start_pp0 = 1'b1;
    end else begin
        ap_reset_start_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mask_table_ce0 = 1'b1;
    end else begin
        mask_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        one_half_table_ce0 = 1'b1;
    end else begin
        one_half_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln1019_fu_186_p2 = (xor_ln1019_fu_181_p2 & icmp_ln1019_1_reg_215_pp0_iter1_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((and_ln1019_fu_186_p2[0:0] == 1'b1) ? x_read_reg_198_pp0_iter1_reg : bitcast_ln1019_fu_177_p1);

assign bitcast_ln1019_fu_177_p1 = select_ln1019_fu_170_p3;

assign data_V_1_fu_132_p2 = (zext_ln204_fu_129_p1 + data_V_reg_203_pp0_iter1_reg);

assign data_V_fu_72_p1 = x;

assign icmp_ln1019_1_fu_92_p2 = ((tmp_253_fu_76_p4 > 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln1019_fu_86_p2 = ((tmp_253_fu_76_p4 < 11'd1022) ? 1'b1 : 1'b0);

assign index_fu_98_p4 = {{data_V_fu_72_p1[57:52]}};

assign mask_table_address0 = zext_ln527_fu_108_p1;

assign one_half_table_address0 = zext_ln527_fu_108_p1;

assign p_Result_34_fu_121_p3 = {{p_Result_s_fu_114_p3}, {63'd0}};

assign p_Result_35_fu_162_p3 = {{tmp_fu_152_p4}, {xs_sig_V_fu_146_p2}};

assign p_Result_s_fu_114_p3 = data_V_reg_203_pp0_iter1_reg[32'd63];

assign select_ln1019_fu_170_p3 = ((icmp_ln1019_reg_209_pp0_iter1_reg[0:0] == 1'b1) ? p_Result_34_fu_121_p3 : p_Result_35_fu_162_p3);

assign tmp_253_fu_76_p4 = {{data_V_fu_72_p1[62:52]}};

assign tmp_254_fu_137_p1 = data_V_1_fu_132_p2[51:0];

assign tmp_fu_152_p4 = {{data_V_1_fu_132_p2[63:52]}};

assign xor_ln1019_fu_181_p2 = (icmp_ln1019_reg_209_pp0_iter1_reg ^ 1'd1);

assign xor_ln1481_fu_141_p2 = (mask_reg_230 ^ 52'd4503599627370495);

assign xs_sig_V_fu_146_p2 = (xor_ln1481_fu_141_p2 & tmp_254_fu_137_p1);

assign zext_ln204_fu_129_p1 = one_half_reg_235;

assign zext_ln527_fu_108_p1 = index_fu_98_p4;

endmodule //algo_unpacked_generic_round_double_s
