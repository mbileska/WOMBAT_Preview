-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity algo_unpacked_write_link_out is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (127 downto 0);
    link_out_i : IN STD_LOGIC_VECTOR (255 downto 0);
    link_out_o : OUT STD_LOGIC_VECTOR (255 downto 0);
    link_out_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of algo_unpacked_write_link_out is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal or_ln_fu_59_p3 : STD_LOGIC_VECTOR (255 downto 0);
    signal link_out_o_preg : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal tmp_fu_49_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln85_fu_45_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    link_out_o_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                link_out_o_preg(0) <= '0';
                link_out_o_preg(1) <= '0';
                link_out_o_preg(2) <= '0';
                link_out_o_preg(3) <= '0';
                link_out_o_preg(4) <= '0';
                link_out_o_preg(5) <= '0';
                link_out_o_preg(6) <= '0';
                link_out_o_preg(7) <= '0';
                link_out_o_preg(8) <= '0';
                link_out_o_preg(9) <= '0';
                link_out_o_preg(10) <= '0';
                link_out_o_preg(11) <= '0';
                link_out_o_preg(12) <= '0';
                link_out_o_preg(13) <= '0';
                link_out_o_preg(14) <= '0';
                link_out_o_preg(15) <= '0';
                link_out_o_preg(16) <= '0';
                link_out_o_preg(17) <= '0';
                link_out_o_preg(18) <= '0';
                link_out_o_preg(19) <= '0';
                link_out_o_preg(20) <= '0';
                link_out_o_preg(21) <= '0';
                link_out_o_preg(22) <= '0';
                link_out_o_preg(23) <= '0';
                link_out_o_preg(24) <= '0';
                link_out_o_preg(25) <= '0';
                link_out_o_preg(26) <= '0';
                link_out_o_preg(27) <= '0';
                link_out_o_preg(28) <= '0';
                link_out_o_preg(29) <= '0';
                link_out_o_preg(30) <= '0';
                link_out_o_preg(31) <= '0';
                link_out_o_preg(32) <= '0';
                link_out_o_preg(33) <= '0';
                link_out_o_preg(34) <= '0';
                link_out_o_preg(35) <= '0';
                link_out_o_preg(36) <= '0';
                link_out_o_preg(37) <= '0';
                link_out_o_preg(38) <= '0';
                link_out_o_preg(39) <= '0';
                link_out_o_preg(40) <= '0';
                link_out_o_preg(41) <= '0';
                link_out_o_preg(42) <= '0';
                link_out_o_preg(43) <= '0';
                link_out_o_preg(44) <= '0';
                link_out_o_preg(45) <= '0';
                link_out_o_preg(46) <= '0';
                link_out_o_preg(47) <= '0';
                link_out_o_preg(48) <= '0';
                link_out_o_preg(49) <= '0';
                link_out_o_preg(50) <= '0';
                link_out_o_preg(51) <= '0';
                link_out_o_preg(52) <= '0';
                link_out_o_preg(53) <= '0';
                link_out_o_preg(54) <= '0';
                link_out_o_preg(55) <= '0';
                link_out_o_preg(56) <= '0';
                link_out_o_preg(57) <= '0';
                link_out_o_preg(58) <= '0';
                link_out_o_preg(59) <= '0';
                link_out_o_preg(60) <= '0';
                link_out_o_preg(61) <= '0';
                link_out_o_preg(62) <= '0';
                link_out_o_preg(63) <= '0';
                link_out_o_preg(64) <= '0';
                link_out_o_preg(65) <= '0';
                link_out_o_preg(66) <= '0';
                link_out_o_preg(67) <= '0';
                link_out_o_preg(68) <= '0';
                link_out_o_preg(69) <= '0';
                link_out_o_preg(70) <= '0';
                link_out_o_preg(71) <= '0';
                link_out_o_preg(72) <= '0';
                link_out_o_preg(73) <= '0';
                link_out_o_preg(74) <= '0';
                link_out_o_preg(75) <= '0';
                link_out_o_preg(76) <= '0';
                link_out_o_preg(77) <= '0';
                link_out_o_preg(78) <= '0';
                link_out_o_preg(79) <= '0';
                link_out_o_preg(80) <= '0';
                link_out_o_preg(81) <= '0';
                link_out_o_preg(82) <= '0';
                link_out_o_preg(83) <= '0';
                link_out_o_preg(84) <= '0';
                link_out_o_preg(85) <= '0';
                link_out_o_preg(86) <= '0';
                link_out_o_preg(87) <= '0';
                link_out_o_preg(88) <= '0';
                link_out_o_preg(89) <= '0';
                link_out_o_preg(90) <= '0';
                link_out_o_preg(91) <= '0';
                link_out_o_preg(92) <= '0';
                link_out_o_preg(93) <= '0';
                link_out_o_preg(94) <= '0';
                link_out_o_preg(95) <= '0';
                link_out_o_preg(96) <= '0';
                link_out_o_preg(97) <= '0';
                link_out_o_preg(98) <= '0';
                link_out_o_preg(99) <= '0';
                link_out_o_preg(100) <= '0';
                link_out_o_preg(101) <= '0';
                link_out_o_preg(102) <= '0';
                link_out_o_preg(103) <= '0';
                link_out_o_preg(104) <= '0';
                link_out_o_preg(105) <= '0';
                link_out_o_preg(106) <= '0';
                link_out_o_preg(107) <= '0';
                link_out_o_preg(108) <= '0';
                link_out_o_preg(109) <= '0';
                link_out_o_preg(110) <= '0';
                link_out_o_preg(111) <= '0';
                link_out_o_preg(112) <= '0';
                link_out_o_preg(113) <= '0';
                link_out_o_preg(114) <= '0';
                link_out_o_preg(115) <= '0';
                link_out_o_preg(116) <= '0';
                link_out_o_preg(117) <= '0';
                link_out_o_preg(118) <= '0';
                link_out_o_preg(119) <= '0';
                link_out_o_preg(120) <= '0';
                link_out_o_preg(121) <= '0';
                link_out_o_preg(122) <= '0';
                link_out_o_preg(123) <= '0';
                link_out_o_preg(124) <= '0';
                link_out_o_preg(125) <= '0';
                link_out_o_preg(126) <= '0';
                link_out_o_preg(127) <= '0';
                link_out_o_preg(192) <= '0';
                link_out_o_preg(193) <= '0';
                link_out_o_preg(194) <= '0';
                link_out_o_preg(195) <= '0';
                link_out_o_preg(196) <= '0';
                link_out_o_preg(197) <= '0';
                link_out_o_preg(198) <= '0';
                link_out_o_preg(199) <= '0';
                link_out_o_preg(200) <= '0';
                link_out_o_preg(201) <= '0';
                link_out_o_preg(202) <= '0';
                link_out_o_preg(203) <= '0';
                link_out_o_preg(204) <= '0';
                link_out_o_preg(205) <= '0';
                link_out_o_preg(206) <= '0';
                link_out_o_preg(207) <= '0';
                link_out_o_preg(208) <= '0';
                link_out_o_preg(209) <= '0';
                link_out_o_preg(210) <= '0';
                link_out_o_preg(211) <= '0';
                link_out_o_preg(212) <= '0';
                link_out_o_preg(213) <= '0';
                link_out_o_preg(214) <= '0';
                link_out_o_preg(215) <= '0';
                link_out_o_preg(216) <= '0';
                link_out_o_preg(217) <= '0';
                link_out_o_preg(218) <= '0';
                link_out_o_preg(219) <= '0';
                link_out_o_preg(220) <= '0';
                link_out_o_preg(221) <= '0';
                link_out_o_preg(222) <= '0';
                link_out_o_preg(223) <= '0';
                link_out_o_preg(224) <= '0';
                link_out_o_preg(225) <= '0';
                link_out_o_preg(226) <= '0';
                link_out_o_preg(227) <= '0';
                link_out_o_preg(228) <= '0';
                link_out_o_preg(229) <= '0';
                link_out_o_preg(230) <= '0';
                link_out_o_preg(231) <= '0';
                link_out_o_preg(232) <= '0';
                link_out_o_preg(233) <= '0';
                link_out_o_preg(234) <= '0';
                link_out_o_preg(235) <= '0';
                link_out_o_preg(236) <= '0';
                link_out_o_preg(237) <= '0';
                link_out_o_preg(238) <= '0';
                link_out_o_preg(239) <= '0';
                link_out_o_preg(240) <= '0';
                link_out_o_preg(241) <= '0';
                link_out_o_preg(242) <= '0';
                link_out_o_preg(243) <= '0';
                link_out_o_preg(244) <= '0';
                link_out_o_preg(245) <= '0';
                link_out_o_preg(246) <= '0';
                link_out_o_preg(247) <= '0';
                link_out_o_preg(248) <= '0';
                link_out_o_preg(249) <= '0';
                link_out_o_preg(250) <= '0';
                link_out_o_preg(251) <= '0';
                link_out_o_preg(252) <= '0';
                link_out_o_preg(253) <= '0';
                link_out_o_preg(254) <= '0';
                link_out_o_preg(255) <= '0';
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                                        link_out_o_preg(127 downto 0) <= or_ln_fu_59_p3(127 downto 0);                    link_out_o_preg(255 downto 192) <= or_ln_fu_59_p3(255 downto 192);
                end if; 
            end if;
        end if;
    end process;

    link_out_o_preg(191 downto 128) <= "0000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    link_out_o_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, or_ln_fu_59_p3, link_out_o_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            link_out_o <= or_ln_fu_59_p3;
        else 
            link_out_o <= link_out_o_preg;
        end if; 
    end process;


    link_out_o_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            link_out_o_ap_vld <= ap_const_logic_1;
        else 
            link_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln_fu_59_p3 <= (tmp_fu_49_p4 & zext_ln85_fu_45_p1);
    tmp_fu_49_p4 <= link_out_i(255 downto 192);
    zext_ln85_fu_45_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),192));
end behav;
