-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity algo_unpacked_output_assignment is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    WOMBAT_out_V_read : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of algo_unpacked_output_assignment is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln902_fu_88_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_fu_70_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln902_fu_92_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_98_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_s_fu_80_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_fu_104_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_12_fu_112_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ieta_val_fu_120_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_158_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_3_fu_140_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln902_1_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_4_fu_174_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_1_fu_150_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_1_fu_180_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_13_fu_188_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ieta_val_1_fu_196_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_234_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_6_fu_216_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln902_2_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_7_fu_250_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_2_fu_226_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_2_fu_256_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_14_fu_264_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ieta_val_2_fu_272_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_310_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_9_fu_292_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln902_3_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_10_fu_326_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_4_fu_302_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_3_fu_332_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_15_fu_340_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ieta_val_3_fu_348_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln674_3_fu_364_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln674_3_fu_356_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln674_2_fu_288_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln674_2_fu_280_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln674_1_fu_212_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln674_1_fu_204_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln674_fu_136_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln674_fu_128_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_7_fu_368_p14 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg(10) <= '0';
                ap_return_preg(11) <= '0';
                ap_return_preg(12) <= '0';
                ap_return_preg(13) <= '0';
                ap_return_preg(14) <= '0';
                ap_return_preg(15) <= '0';
                ap_return_preg(16) <= '0';
                ap_return_preg(17) <= '0';
                ap_return_preg(18) <= '0';
                ap_return_preg(19) <= '0';
                ap_return_preg(20) <= '0';
                ap_return_preg(21) <= '0';
                ap_return_preg(22) <= '0';
                ap_return_preg(23) <= '0';
                ap_return_preg(24) <= '0';
                ap_return_preg(25) <= '0';
                ap_return_preg(42) <= '0';
                ap_return_preg(43) <= '0';
                ap_return_preg(44) <= '0';
                ap_return_preg(45) <= '0';
                ap_return_preg(46) <= '0';
                ap_return_preg(47) <= '0';
                ap_return_preg(48) <= '0';
                ap_return_preg(49) <= '0';
                ap_return_preg(50) <= '0';
                ap_return_preg(51) <= '0';
                ap_return_preg(52) <= '0';
                ap_return_preg(53) <= '0';
                ap_return_preg(54) <= '0';
                ap_return_preg(55) <= '0';
                ap_return_preg(56) <= '0';
                ap_return_preg(57) <= '0';
                ap_return_preg(74) <= '0';
                ap_return_preg(75) <= '0';
                ap_return_preg(76) <= '0';
                ap_return_preg(77) <= '0';
                ap_return_preg(78) <= '0';
                ap_return_preg(79) <= '0';
                ap_return_preg(80) <= '0';
                ap_return_preg(81) <= '0';
                ap_return_preg(82) <= '0';
                ap_return_preg(83) <= '0';
                ap_return_preg(84) <= '0';
                ap_return_preg(85) <= '0';
                ap_return_preg(86) <= '0';
                ap_return_preg(87) <= '0';
                ap_return_preg(88) <= '0';
                ap_return_preg(89) <= '0';
                ap_return_preg(106) <= '0';
                ap_return_preg(107) <= '0';
                ap_return_preg(108) <= '0';
                ap_return_preg(109) <= '0';
                ap_return_preg(110) <= '0';
                ap_return_preg(111) <= '0';
                ap_return_preg(112) <= '0';
                ap_return_preg(113) <= '0';
                ap_return_preg(114) <= '0';
                ap_return_preg(115) <= '0';
                ap_return_preg(116) <= '0';
                ap_return_preg(117) <= '0';
                ap_return_preg(118) <= '0';
                ap_return_preg(119) <= '0';
                ap_return_preg(120) <= '0';
                ap_return_preg(121) <= '0';
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                                        ap_return_preg(25 downto 10) <= p_Result_7_fu_368_p14(25 downto 10);                    ap_return_preg(57 downto 42) <= p_Result_7_fu_368_p14(57 downto 42);                    ap_return_preg(89 downto 74) <= p_Result_7_fu_368_p14(89 downto 74);                    ap_return_preg(121 downto 106) <= p_Result_7_fu_368_p14(121 downto 106);
                end if; 
            end if;
        end if;
    end process;

    ap_return_preg(9 downto 0) <= "0000000000";
    ap_return_preg(41 downto 26) <= "0000000000000000";
    ap_return_preg(73 downto 58) <= "0000000000000000";
    ap_return_preg(105 downto 90) <= "0000000000000000";
    ap_return_preg(127 downto 122) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_Result_7_fu_368_p14, ap_return_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return <= p_Result_7_fu_368_p14;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    icmp_ln902_1_fu_168_p2 <= "1" when (p_Result_6_fu_158_p4 = ap_const_lv10_0) else "0";
    icmp_ln902_2_fu_244_p2 <= "1" when (p_Result_3_fu_234_p4 = ap_const_lv10_0) else "0";
    icmp_ln902_3_fu_320_p2 <= "1" when (p_Result_5_fu_310_p4 = ap_const_lv10_0) else "0";
    icmp_ln902_fu_92_p2 <= "1" when (trunc_ln902_fu_88_p1 = ap_const_lv10_0) else "0";
    ieta_val_1_fu_196_p3 <= ret_V_13_fu_188_p3(5 downto 5);
    ieta_val_2_fu_272_p3 <= ret_V_14_fu_264_p3(5 downto 5);
    ieta_val_3_fu_348_p3 <= ret_V_15_fu_340_p3(5 downto 5);
    ieta_val_fu_120_p3 <= ret_V_12_fu_112_p3(5 downto 5);
    p_Result_1_fu_150_p3 <= WOMBAT_out_V_read(31 downto 31);
    p_Result_2_fu_226_p3 <= WOMBAT_out_V_read(47 downto 47);
    p_Result_3_fu_234_p4 <= WOMBAT_out_V_read(41 downto 32);
    p_Result_4_fu_302_p3 <= WOMBAT_out_V_read(63 downto 63);
    p_Result_5_fu_310_p4 <= WOMBAT_out_V_read(57 downto 48);
    p_Result_6_fu_158_p4 <= WOMBAT_out_V_read(25 downto 16);
    p_Result_7_fu_368_p14 <= ((((((((((((ap_const_lv6_0 & sext_ln674_3_fu_364_p1) & select_ln674_3_fu_356_p3) & ap_const_lv16_0) & sext_ln674_2_fu_288_p1) & select_ln674_2_fu_280_p3) & ap_const_lv16_0) & sext_ln674_1_fu_212_p1) & select_ln674_1_fu_204_p3) & ap_const_lv16_0) & sext_ln674_fu_136_p1) & select_ln674_fu_128_p3) & ap_const_lv10_0);
    p_Result_s_fu_80_p3 <= WOMBAT_out_V_read(15 downto 15);
    ret_V_10_fu_326_p2 <= std_logic_vector(unsigned(ret_V_9_fu_292_p4) + unsigned(ap_const_lv6_1));
    ret_V_12_fu_112_p3 <= 
        select_ln901_fu_104_p3 when (p_Result_s_fu_80_p3(0) = '1') else 
        ret_V_fu_70_p4;
    ret_V_13_fu_188_p3 <= 
        select_ln901_1_fu_180_p3 when (p_Result_1_fu_150_p3(0) = '1') else 
        ret_V_3_fu_140_p4;
    ret_V_14_fu_264_p3 <= 
        select_ln901_2_fu_256_p3 when (p_Result_2_fu_226_p3(0) = '1') else 
        ret_V_6_fu_216_p4;
    ret_V_15_fu_340_p3 <= 
        select_ln901_3_fu_332_p3 when (p_Result_4_fu_302_p3(0) = '1') else 
        ret_V_9_fu_292_p4;
    ret_V_1_fu_98_p2 <= std_logic_vector(unsigned(ret_V_fu_70_p4) + unsigned(ap_const_lv6_1));
    ret_V_3_fu_140_p4 <= WOMBAT_out_V_read(31 downto 26);
    ret_V_4_fu_174_p2 <= std_logic_vector(unsigned(ret_V_3_fu_140_p4) + unsigned(ap_const_lv6_1));
    ret_V_6_fu_216_p4 <= WOMBAT_out_V_read(47 downto 42);
    ret_V_7_fu_250_p2 <= std_logic_vector(unsigned(ret_V_6_fu_216_p4) + unsigned(ap_const_lv6_1));
    ret_V_9_fu_292_p4 <= WOMBAT_out_V_read(63 downto 58);
    ret_V_fu_70_p4 <= WOMBAT_out_V_read(15 downto 10);
    select_ln674_1_fu_204_p3 <= 
        ap_const_lv8_FF when (ieta_val_1_fu_196_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln674_2_fu_280_p3 <= 
        ap_const_lv8_FF when (ieta_val_2_fu_272_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln674_3_fu_356_p3 <= 
        ap_const_lv8_FF when (ieta_val_3_fu_348_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln674_fu_128_p3 <= 
        ap_const_lv8_FF when (ieta_val_fu_120_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln901_1_fu_180_p3 <= 
        ret_V_3_fu_140_p4 when (icmp_ln902_1_fu_168_p2(0) = '1') else 
        ret_V_4_fu_174_p2;
    select_ln901_2_fu_256_p3 <= 
        ret_V_6_fu_216_p4 when (icmp_ln902_2_fu_244_p2(0) = '1') else 
        ret_V_7_fu_250_p2;
    select_ln901_3_fu_332_p3 <= 
        ret_V_9_fu_292_p4 when (icmp_ln902_3_fu_320_p2(0) = '1') else 
        ret_V_10_fu_326_p2;
    select_ln901_fu_104_p3 <= 
        ret_V_fu_70_p4 when (icmp_ln902_fu_92_p2(0) = '1') else 
        ret_V_1_fu_98_p2;
        sext_ln674_1_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_13_fu_188_p3),8));

        sext_ln674_2_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_14_fu_264_p3),8));

        sext_ln674_3_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_15_fu_340_p3),8));

        sext_ln674_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_12_fu_112_p3),8));

    trunc_ln902_fu_88_p1 <= WOMBAT_out_V_read(10 - 1 downto 0);
end behav;
