-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity algo_unpacked is
port (
    link_in_0 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_1 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_2 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_3 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_4 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_5 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_6 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_7 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_8 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_9 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_10 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_11 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_12 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_13 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_14 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_15 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_16 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_17 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_18 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_19 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_20 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_21 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_22 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_23 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_24 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_25 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_26 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_27 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_28 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_29 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_30 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_31 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_32 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_33 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_34 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_35 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_out_i : IN STD_LOGIC_VECTOR (255 downto 0);
    link_out_o : OUT STD_LOGIC_VECTOR (255 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    link_out_o_ap_vld : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of algo_unpacked is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "algo_unpacked_algo_unpacked,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690t-ffg1927-2,HLS_INPUT_CLOCK=6.250000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.794437,HLS_SYN_LAT=22,HLS_SYN_TPT=4,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=38861,HLS_SYN_LUT=89643,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal region_extraction_U0_ap_start : STD_LOGIC;
    signal region_extraction_U0_ap_done : STD_LOGIC;
    signal region_extraction_U0_ap_continue : STD_LOGIC;
    signal region_extraction_U0_ap_idle : STD_LOGIC;
    signal region_extraction_U0_ap_ready : STD_LOGIC;
    signal region_extraction_U0_ap_return : STD_LOGIC_VECTOR (839 downto 0);
    signal et_calo_ad_V_full_n : STD_LOGIC;
    signal WOMBAT_U0_ap_continue : STD_LOGIC;
    signal WOMBAT_U0_ap_start : STD_LOGIC;
    signal WOMBAT_U0_ap_done : STD_LOGIC;
    signal WOMBAT_U0_ap_idle : STD_LOGIC;
    signal WOMBAT_U0_ap_ready : STD_LOGIC;
    signal WOMBAT_U0_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal WOMBAT_out_V_full_n : STD_LOGIC;
    signal output_assignment_U0_ap_start : STD_LOGIC;
    signal output_assignment_U0_ap_done : STD_LOGIC;
    signal output_assignment_U0_ap_continue : STD_LOGIC;
    signal output_assignment_U0_ap_idle : STD_LOGIC;
    signal output_assignment_U0_ap_ready : STD_LOGIC;
    signal output_assignment_U0_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_link_out_V_0_full_n : STD_LOGIC;
    signal write_link_out_U0_ap_start : STD_LOGIC;
    signal write_link_out_U0_ap_done : STD_LOGIC;
    signal write_link_out_U0_ap_continue : STD_LOGIC;
    signal write_link_out_U0_ap_idle : STD_LOGIC;
    signal write_link_out_U0_ap_ready : STD_LOGIC;
    signal write_link_out_U0_link_out_o : STD_LOGIC_VECTOR (255 downto 0);
    signal write_link_out_U0_link_out_o_ap_vld : STD_LOGIC;
    signal et_calo_ad_V_dout : STD_LOGIC_VECTOR (839 downto 0);
    signal et_calo_ad_V_empty_n : STD_LOGIC;
    signal WOMBAT_out_V_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal WOMBAT_out_V_empty_n : STD_LOGIC;
    signal tmp_link_out_V_0_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_link_out_V_0_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_region_extraction_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_region_extraction_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_write_link_out_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_write_link_out_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component algo_unpacked_region_extraction IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        link_in_0 : IN STD_LOGIC_VECTOR (127 downto 0);
        link_in_1 : IN STD_LOGIC_VECTOR (127 downto 0);
        link_in_2 : IN STD_LOGIC_VECTOR (127 downto 0);
        link_in_3 : IN STD_LOGIC_VECTOR (127 downto 0);
        link_in_4 : IN STD_LOGIC_VECTOR (127 downto 0);
        link_in_5 : IN STD_LOGIC_VECTOR (127 downto 0);
        link_in_6 : IN STD_LOGIC_VECTOR (127 downto 0);
        link_in_7 : IN STD_LOGIC_VECTOR (127 downto 0);
        link_in_8 : IN STD_LOGIC_VECTOR (127 downto 0);
        link_in_9 : IN STD_LOGIC_VECTOR (127 downto 0);
        link_in_10 : IN STD_LOGIC_VECTOR (127 downto 0);
        link_in_11 : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (839 downto 0) );
    end component;


    component algo_unpacked_WOMBAT IS
    port (
        ap_continue : IN STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inputs_misc_v2_ft20_V_read : IN STD_LOGIC_VECTOR (839 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component algo_unpacked_output_assignment IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        WOMBAT_out_V_read : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component algo_unpacked_write_link_out IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (127 downto 0);
        link_out_i : IN STD_LOGIC_VECTOR (255 downto 0);
        link_out_o : OUT STD_LOGIC_VECTOR (255 downto 0);
        link_out_o_ap_vld : OUT STD_LOGIC );
    end component;


    component algo_unpacked_fifo_w840_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (839 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (839 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component algo_unpacked_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component algo_unpacked_fifo_w128_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    region_extraction_U0 : component algo_unpacked_region_extraction
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => region_extraction_U0_ap_start,
        ap_done => region_extraction_U0_ap_done,
        ap_continue => region_extraction_U0_ap_continue,
        ap_idle => region_extraction_U0_ap_idle,
        ap_ready => region_extraction_U0_ap_ready,
        link_in_0 => link_in_0,
        link_in_1 => link_in_1,
        link_in_2 => link_in_2,
        link_in_3 => link_in_3,
        link_in_4 => link_in_4,
        link_in_5 => link_in_5,
        link_in_6 => link_in_6,
        link_in_7 => link_in_7,
        link_in_8 => link_in_8,
        link_in_9 => link_in_9,
        link_in_10 => link_in_10,
        link_in_11 => link_in_11,
        ap_return => region_extraction_U0_ap_return);

    WOMBAT_U0 : component algo_unpacked_WOMBAT
    port map (
        ap_continue => WOMBAT_U0_ap_continue,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => WOMBAT_U0_ap_start,
        ap_done => WOMBAT_U0_ap_done,
        ap_idle => WOMBAT_U0_ap_idle,
        ap_ready => WOMBAT_U0_ap_ready,
        inputs_misc_v2_ft20_V_read => et_calo_ad_V_dout,
        ap_return => WOMBAT_U0_ap_return);

    output_assignment_U0 : component algo_unpacked_output_assignment
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => output_assignment_U0_ap_start,
        ap_done => output_assignment_U0_ap_done,
        ap_continue => output_assignment_U0_ap_continue,
        ap_idle => output_assignment_U0_ap_idle,
        ap_ready => output_assignment_U0_ap_ready,
        WOMBAT_out_V_read => WOMBAT_out_V_dout,
        ap_return => output_assignment_U0_ap_return);

    write_link_out_U0 : component algo_unpacked_write_link_out
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => write_link_out_U0_ap_start,
        ap_done => write_link_out_U0_ap_done,
        ap_continue => write_link_out_U0_ap_continue,
        ap_idle => write_link_out_U0_ap_idle,
        ap_ready => write_link_out_U0_ap_ready,
        p_read => tmp_link_out_V_0_dout,
        link_out_i => link_out_i,
        link_out_o => write_link_out_U0_link_out_o,
        link_out_o_ap_vld => write_link_out_U0_link_out_o_ap_vld);

    et_calo_ad_V_U : component algo_unpacked_fifo_w840_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => region_extraction_U0_ap_return,
        if_full_n => et_calo_ad_V_full_n,
        if_write => region_extraction_U0_ap_done,
        if_dout => et_calo_ad_V_dout,
        if_empty_n => et_calo_ad_V_empty_n,
        if_read => WOMBAT_U0_ap_ready);

    WOMBAT_out_V_U : component algo_unpacked_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => WOMBAT_U0_ap_return,
        if_full_n => WOMBAT_out_V_full_n,
        if_write => WOMBAT_U0_ap_done,
        if_dout => WOMBAT_out_V_dout,
        if_empty_n => WOMBAT_out_V_empty_n,
        if_read => output_assignment_U0_ap_ready);

    tmp_link_out_V_0_U : component algo_unpacked_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => output_assignment_U0_ap_return,
        if_full_n => tmp_link_out_V_0_full_n,
        if_write => output_assignment_U0_ap_done,
        if_dout => tmp_link_out_V_0_dout,
        if_empty_n => tmp_link_out_V_0_empty_n,
        if_read => write_link_out_U0_ap_ready);





    ap_sync_reg_region_extraction_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_region_extraction_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_region_extraction_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_region_extraction_U0_ap_ready <= ap_sync_region_extraction_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_write_link_out_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_write_link_out_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_write_link_out_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_write_link_out_U0_ap_ready <= ap_sync_write_link_out_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    WOMBAT_U0_ap_continue <= WOMBAT_out_V_full_n;
    WOMBAT_U0_ap_start <= et_calo_ad_V_empty_n;
    ap_done <= write_link_out_U0_ap_done;
    ap_idle <= (write_link_out_U0_ap_idle and region_extraction_U0_ap_idle and output_assignment_U0_ap_idle and (ap_const_logic_1 xor WOMBAT_out_V_empty_n) and (tmp_link_out_V_0_empty_n xor ap_const_logic_1) and (et_calo_ad_V_empty_n xor ap_const_logic_1) and WOMBAT_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_ready <= (ap_sync_write_link_out_U0_ap_ready and ap_sync_region_extraction_U0_ap_ready);
    ap_sync_region_extraction_U0_ap_ready <= (region_extraction_U0_ap_ready or ap_sync_reg_region_extraction_U0_ap_ready);
    ap_sync_write_link_out_U0_ap_ready <= (write_link_out_U0_ap_ready or ap_sync_reg_write_link_out_U0_ap_ready);
    link_out_o <= write_link_out_U0_link_out_o;
    link_out_o_ap_vld <= write_link_out_U0_link_out_o_ap_vld;
    output_assignment_U0_ap_continue <= tmp_link_out_V_0_full_n;
    output_assignment_U0_ap_start <= WOMBAT_out_V_empty_n;
    region_extraction_U0_ap_continue <= et_calo_ad_V_full_n;
    region_extraction_U0_ap_start <= ((ap_sync_reg_region_extraction_U0_ap_ready xor ap_const_logic_1) and ap_start);
    write_link_out_U0_ap_continue <= ap_const_logic_1;
    write_link_out_U0_ap_start <= (tmp_link_out_V_0_empty_n and (ap_sync_reg_write_link_out_U0_ap_ready xor ap_const_logic_1) and ap_start);
end behav;
