// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module algo_unpacked_output_assignment (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        WOMBAT_out_V_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] WOMBAT_out_V_read;
output  [127:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[127:0] ap_return;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [9:0] trunc_ln902_fu_88_p1;
wire   [5:0] ret_V_fu_70_p4;
wire   [0:0] icmp_ln902_fu_92_p2;
wire   [5:0] ret_V_1_fu_98_p2;
wire   [0:0] p_Result_s_fu_80_p3;
wire   [5:0] select_ln901_fu_104_p3;
wire  signed [5:0] ret_V_12_fu_112_p3;
wire   [0:0] ieta_val_fu_120_p3;
wire   [9:0] p_Result_6_fu_158_p4;
wire   [5:0] ret_V_3_fu_140_p4;
wire   [0:0] icmp_ln902_1_fu_168_p2;
wire   [5:0] ret_V_4_fu_174_p2;
wire   [0:0] p_Result_1_fu_150_p3;
wire   [5:0] select_ln901_1_fu_180_p3;
wire  signed [5:0] ret_V_13_fu_188_p3;
wire   [0:0] ieta_val_1_fu_196_p3;
wire   [9:0] p_Result_3_fu_234_p4;
wire   [5:0] ret_V_6_fu_216_p4;
wire   [0:0] icmp_ln902_2_fu_244_p2;
wire   [5:0] ret_V_7_fu_250_p2;
wire   [0:0] p_Result_2_fu_226_p3;
wire   [5:0] select_ln901_2_fu_256_p3;
wire  signed [5:0] ret_V_14_fu_264_p3;
wire   [0:0] ieta_val_2_fu_272_p3;
wire   [9:0] p_Result_5_fu_310_p4;
wire   [5:0] ret_V_9_fu_292_p4;
wire   [0:0] icmp_ln902_3_fu_320_p2;
wire   [5:0] ret_V_10_fu_326_p2;
wire   [0:0] p_Result_4_fu_302_p3;
wire   [5:0] select_ln901_3_fu_332_p3;
wire  signed [5:0] ret_V_15_fu_340_p3;
wire   [0:0] ieta_val_3_fu_348_p3;
wire  signed [7:0] sext_ln674_3_fu_364_p1;
wire   [7:0] select_ln674_3_fu_356_p3;
wire  signed [7:0] sext_ln674_2_fu_288_p1;
wire   [7:0] select_ln674_2_fu_280_p3;
wire  signed [7:0] sext_ln674_1_fu_212_p1;
wire   [7:0] select_ln674_1_fu_204_p3;
wire  signed [7:0] sext_ln674_fu_136_p1;
wire   [7:0] select_ln674_fu_128_p3;
wire   [127:0] p_Result_7_fu_368_p14;
reg   [127:0] ap_return_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_preg = 128'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_preg[10] <= 1'b0;
        ap_return_preg[11] <= 1'b0;
        ap_return_preg[12] <= 1'b0;
        ap_return_preg[13] <= 1'b0;
        ap_return_preg[14] <= 1'b0;
        ap_return_preg[15] <= 1'b0;
        ap_return_preg[16] <= 1'b0;
        ap_return_preg[17] <= 1'b0;
        ap_return_preg[18] <= 1'b0;
        ap_return_preg[19] <= 1'b0;
        ap_return_preg[20] <= 1'b0;
        ap_return_preg[21] <= 1'b0;
        ap_return_preg[22] <= 1'b0;
        ap_return_preg[23] <= 1'b0;
        ap_return_preg[24] <= 1'b0;
        ap_return_preg[25] <= 1'b0;
        ap_return_preg[42] <= 1'b0;
        ap_return_preg[43] <= 1'b0;
        ap_return_preg[44] <= 1'b0;
        ap_return_preg[45] <= 1'b0;
        ap_return_preg[46] <= 1'b0;
        ap_return_preg[47] <= 1'b0;
        ap_return_preg[48] <= 1'b0;
        ap_return_preg[49] <= 1'b0;
        ap_return_preg[50] <= 1'b0;
        ap_return_preg[51] <= 1'b0;
        ap_return_preg[52] <= 1'b0;
        ap_return_preg[53] <= 1'b0;
        ap_return_preg[54] <= 1'b0;
        ap_return_preg[55] <= 1'b0;
        ap_return_preg[56] <= 1'b0;
        ap_return_preg[57] <= 1'b0;
        ap_return_preg[74] <= 1'b0;
        ap_return_preg[75] <= 1'b0;
        ap_return_preg[76] <= 1'b0;
        ap_return_preg[77] <= 1'b0;
        ap_return_preg[78] <= 1'b0;
        ap_return_preg[79] <= 1'b0;
        ap_return_preg[80] <= 1'b0;
        ap_return_preg[81] <= 1'b0;
        ap_return_preg[82] <= 1'b0;
        ap_return_preg[83] <= 1'b0;
        ap_return_preg[84] <= 1'b0;
        ap_return_preg[85] <= 1'b0;
        ap_return_preg[86] <= 1'b0;
        ap_return_preg[87] <= 1'b0;
        ap_return_preg[88] <= 1'b0;
        ap_return_preg[89] <= 1'b0;
        ap_return_preg[106] <= 1'b0;
        ap_return_preg[107] <= 1'b0;
        ap_return_preg[108] <= 1'b0;
        ap_return_preg[109] <= 1'b0;
        ap_return_preg[110] <= 1'b0;
        ap_return_preg[111] <= 1'b0;
        ap_return_preg[112] <= 1'b0;
        ap_return_preg[113] <= 1'b0;
        ap_return_preg[114] <= 1'b0;
        ap_return_preg[115] <= 1'b0;
        ap_return_preg[116] <= 1'b0;
        ap_return_preg[117] <= 1'b0;
        ap_return_preg[118] <= 1'b0;
        ap_return_preg[119] <= 1'b0;
        ap_return_preg[120] <= 1'b0;
        ap_return_preg[121] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_preg[25 : 10] <= p_Result_7_fu_368_p14[25 : 10];
            ap_return_preg[57 : 42] <= p_Result_7_fu_368_p14[57 : 42];
            ap_return_preg[89 : 74] <= p_Result_7_fu_368_p14[89 : 74];
            ap_return_preg[121 : 106] <= p_Result_7_fu_368_p14[121 : 106];
        end
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return = p_Result_7_fu_368_p14;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign icmp_ln902_1_fu_168_p2 = ((p_Result_6_fu_158_p4 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln902_2_fu_244_p2 = ((p_Result_3_fu_234_p4 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln902_3_fu_320_p2 = ((p_Result_5_fu_310_p4 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln902_fu_92_p2 = ((trunc_ln902_fu_88_p1 == 10'd0) ? 1'b1 : 1'b0);

assign ieta_val_1_fu_196_p3 = ret_V_13_fu_188_p3[32'd5];

assign ieta_val_2_fu_272_p3 = ret_V_14_fu_264_p3[32'd5];

assign ieta_val_3_fu_348_p3 = ret_V_15_fu_340_p3[32'd5];

assign ieta_val_fu_120_p3 = ret_V_12_fu_112_p3[32'd5];

assign p_Result_1_fu_150_p3 = WOMBAT_out_V_read[32'd31];

assign p_Result_2_fu_226_p3 = WOMBAT_out_V_read[32'd47];

assign p_Result_3_fu_234_p4 = {{WOMBAT_out_V_read[41:32]}};

assign p_Result_4_fu_302_p3 = WOMBAT_out_V_read[32'd63];

assign p_Result_5_fu_310_p4 = {{WOMBAT_out_V_read[57:48]}};

assign p_Result_6_fu_158_p4 = {{WOMBAT_out_V_read[25:16]}};

assign p_Result_7_fu_368_p14 = {{{{{{{{{{{{{{{{{{{{{{{{6'd0}, {sext_ln674_3_fu_364_p1}}}, {select_ln674_3_fu_356_p3}}}, {16'd0}}}, {sext_ln674_2_fu_288_p1}}}, {select_ln674_2_fu_280_p3}}}, {16'd0}}}, {sext_ln674_1_fu_212_p1}}}, {select_ln674_1_fu_204_p3}}}, {16'd0}}}, {sext_ln674_fu_136_p1}}}, {select_ln674_fu_128_p3}}}, {10'd0}};

assign p_Result_s_fu_80_p3 = WOMBAT_out_V_read[32'd15];

assign ret_V_10_fu_326_p2 = (ret_V_9_fu_292_p4 + 6'd1);

assign ret_V_12_fu_112_p3 = ((p_Result_s_fu_80_p3[0:0] == 1'b1) ? select_ln901_fu_104_p3 : ret_V_fu_70_p4);

assign ret_V_13_fu_188_p3 = ((p_Result_1_fu_150_p3[0:0] == 1'b1) ? select_ln901_1_fu_180_p3 : ret_V_3_fu_140_p4);

assign ret_V_14_fu_264_p3 = ((p_Result_2_fu_226_p3[0:0] == 1'b1) ? select_ln901_2_fu_256_p3 : ret_V_6_fu_216_p4);

assign ret_V_15_fu_340_p3 = ((p_Result_4_fu_302_p3[0:0] == 1'b1) ? select_ln901_3_fu_332_p3 : ret_V_9_fu_292_p4);

assign ret_V_1_fu_98_p2 = (ret_V_fu_70_p4 + 6'd1);

assign ret_V_3_fu_140_p4 = {{WOMBAT_out_V_read[31:26]}};

assign ret_V_4_fu_174_p2 = (ret_V_3_fu_140_p4 + 6'd1);

assign ret_V_6_fu_216_p4 = {{WOMBAT_out_V_read[47:42]}};

assign ret_V_7_fu_250_p2 = (ret_V_6_fu_216_p4 + 6'd1);

assign ret_V_9_fu_292_p4 = {{WOMBAT_out_V_read[63:58]}};

assign ret_V_fu_70_p4 = {{WOMBAT_out_V_read[15:10]}};

assign select_ln674_1_fu_204_p3 = ((ieta_val_1_fu_196_p3[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln674_2_fu_280_p3 = ((ieta_val_2_fu_272_p3[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln674_3_fu_356_p3 = ((ieta_val_3_fu_348_p3[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln674_fu_128_p3 = ((ieta_val_fu_120_p3[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln901_1_fu_180_p3 = ((icmp_ln902_1_fu_168_p2[0:0] == 1'b1) ? ret_V_3_fu_140_p4 : ret_V_4_fu_174_p2);

assign select_ln901_2_fu_256_p3 = ((icmp_ln902_2_fu_244_p2[0:0] == 1'b1) ? ret_V_6_fu_216_p4 : ret_V_7_fu_250_p2);

assign select_ln901_3_fu_332_p3 = ((icmp_ln902_3_fu_320_p2[0:0] == 1'b1) ? ret_V_9_fu_292_p4 : ret_V_10_fu_326_p2);

assign select_ln901_fu_104_p3 = ((icmp_ln902_fu_92_p2[0:0] == 1'b1) ? ret_V_fu_70_p4 : ret_V_1_fu_98_p2);

assign sext_ln674_1_fu_212_p1 = ret_V_13_fu_188_p3;

assign sext_ln674_2_fu_288_p1 = ret_V_14_fu_264_p3;

assign sext_ln674_3_fu_364_p1 = ret_V_15_fu_340_p3;

assign sext_ln674_fu_136_p1 = ret_V_12_fu_112_p3;

assign trunc_ln902_fu_88_p1 = WOMBAT_out_V_read[9:0];

always @ (posedge ap_clk) begin
    ap_return_preg[9:0] <= 10'b0000000000;
    ap_return_preg[41:26] <= 16'b0000000000000000;
    ap_return_preg[73:58] <= 16'b0000000000000000;
    ap_return_preg[105:90] <= 16'b0000000000000000;
    ap_return_preg[127:122] <= 6'b000000;
end

endmodule //algo_unpacked_output_assignment
