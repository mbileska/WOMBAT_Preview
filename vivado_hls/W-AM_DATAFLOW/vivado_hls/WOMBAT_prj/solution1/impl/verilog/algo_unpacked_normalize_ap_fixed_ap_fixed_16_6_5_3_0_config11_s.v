// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module algo_unpacked_normalize_ap_fixed_ap_fixed_16_6_5_3_0_config11_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15,
        ap_return_16,
        ap_return_17,
        ap_return_18,
        ap_return_19,
        ap_return_20,
        ap_return_21,
        ap_return_22,
        ap_return_23,
        ap_return_24,
        ap_return_25,
        ap_return_26,
        ap_return_27,
        ap_return_28,
        ap_return_29,
        ap_return_30,
        ap_return_31,
        ap_return_32,
        ap_return_33,
        ap_return_34,
        ap_return_35,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] p_read;
input  [15:0] p_read1;
input  [15:0] p_read2;
input  [15:0] p_read3;
input  [15:0] p_read4;
input  [15:0] p_read5;
input  [15:0] p_read6;
input  [15:0] p_read7;
input  [15:0] p_read8;
input  [15:0] p_read9;
input  [15:0] p_read10;
input  [15:0] p_read11;
input  [15:0] p_read12;
input  [15:0] p_read13;
input  [15:0] p_read14;
input  [15:0] p_read15;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;
output  [15:0] ap_return_3;
output  [15:0] ap_return_4;
output  [15:0] ap_return_5;
output  [15:0] ap_return_6;
output  [15:0] ap_return_7;
output  [15:0] ap_return_8;
output  [15:0] ap_return_9;
output  [15:0] ap_return_10;
output  [15:0] ap_return_11;
output  [15:0] ap_return_12;
output  [15:0] ap_return_13;
output  [15:0] ap_return_14;
output  [15:0] ap_return_15;
output  [15:0] ap_return_16;
output  [15:0] ap_return_17;
output  [15:0] ap_return_18;
output  [15:0] ap_return_19;
output  [15:0] ap_return_20;
output  [15:0] ap_return_21;
output  [15:0] ap_return_22;
output  [15:0] ap_return_23;
output  [15:0] ap_return_24;
output  [15:0] ap_return_25;
output  [15:0] ap_return_26;
output  [15:0] ap_return_27;
output  [15:0] ap_return_28;
output  [15:0] ap_return_29;
output  [15:0] ap_return_30;
output  [15:0] ap_return_31;
output  [15:0] ap_return_32;
output  [15:0] ap_return_33;
output  [15:0] ap_return_34;
output  [15:0] ap_return_35;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [25:0] mul_ln1245_fu_216_p2;
reg   [25:0] mul_ln1245_reg_2584;
wire   [25:0] mul_ln1245_76_fu_217_p2;
reg   [25:0] mul_ln1245_76_reg_2588;
wire   [25:0] mul_ln1245_77_fu_187_p2;
reg   [25:0] mul_ln1245_77_reg_2592;
wire   [25:0] mul_ln1245_78_fu_215_p2;
reg   [25:0] mul_ln1245_78_reg_2596;
wire   [25:0] mul_ln1245_79_fu_226_p2;
reg   [25:0] mul_ln1245_79_reg_2600;
wire   [25:0] mul_ln1245_80_fu_204_p2;
reg   [25:0] mul_ln1245_80_reg_2604;
wire   [25:0] mul_ln1245_81_fu_208_p2;
reg   [25:0] mul_ln1245_81_reg_2608;
wire   [25:0] mul_ln1245_82_fu_209_p2;
reg   [25:0] mul_ln1245_82_reg_2612;
wire   [25:0] mul_ln1245_83_fu_194_p2;
reg   [25:0] mul_ln1245_83_reg_2616;
wire   [25:0] mul_ln1245_84_fu_186_p2;
reg   [25:0] mul_ln1245_84_reg_2620;
wire   [25:0] mul_ln1245_85_fu_230_p2;
reg   [25:0] mul_ln1245_85_reg_2624;
wire   [25:0] mul_ln1245_86_fu_190_p2;
reg   [25:0] mul_ln1245_86_reg_2628;
reg   [15:0] ap_port_reg_p_read;
reg   [15:0] ap_port_reg_p_read4;
reg   [15:0] ap_port_reg_p_read8;
reg   [15:0] ap_port_reg_p_read12;
wire    ap_CS_fsm_state2;
wire  signed [15:0] mul_ln1245_84_fu_186_p1;
wire   [13:0] mul_ln1245_77_fu_187_p1;
wire   [13:0] mul_ln1245_86_fu_190_p1;
wire   [13:0] mul_ln1245_83_fu_194_p1;
wire   [13:0] mul_ln1245_80_fu_204_p1;
wire  signed [15:0] mul_ln1245_81_fu_208_p1;
wire   [11:0] mul_ln1245_82_fu_209_p1;
wire  signed [15:0] mul_ln1245_78_fu_215_p1;
wire  signed [15:0] mul_ln1245_fu_216_p1;
wire   [11:0] mul_ln1245_76_fu_217_p1;
wire   [11:0] mul_ln1245_79_fu_226_p1;
wire   [11:0] mul_ln1245_85_fu_230_p1;
wire   [13:0] trunc_ln1171_fu_2693_p1;
wire   [21:0] shl_ln1171_s_fu_2705_p3;
wire  signed [22:0] sext_ln1245_113_fu_2713_p1;
wire   [22:0] add_ln1245_151_fu_2717_p2;
wire  signed [25:0] sext_ln1245_114_fu_2723_p1;
wire   [25:0] shl_ln_fu_2697_p3;
wire   [25:0] add_ln1245_fu_2727_p2;
wire   [25:0] add_ln1245_152_fu_2743_p2;
wire   [25:0] add_ln1245_153_fu_2759_p2;
wire   [25:0] add_ln1245_154_fu_2775_p2;
wire   [13:0] trunc_ln1171_1_fu_2791_p1;
wire   [21:0] shl_ln1171_76_fu_2803_p3;
wire  signed [22:0] sext_ln1245_117_fu_2811_p1;
wire   [22:0] add_ln1245_155_fu_2815_p2;
wire  signed [25:0] sext_ln1245_118_fu_2821_p1;
wire   [25:0] shl_ln1171_75_fu_2795_p3;
wire   [25:0] add_ln1245_156_fu_2825_p2;
wire   [25:0] add_ln1245_157_fu_2841_p2;
wire   [25:0] add_ln1245_158_fu_2857_p2;
wire   [25:0] add_ln1245_159_fu_2873_p2;
wire   [13:0] trunc_ln1171_2_fu_2889_p1;
wire   [21:0] shl_ln1171_78_fu_2901_p3;
wire  signed [22:0] sext_ln1245_128_fu_2909_p1;
wire   [22:0] add_ln1245_160_fu_2913_p2;
wire  signed [25:0] sext_ln1245_129_fu_2919_p1;
wire   [25:0] shl_ln1171_77_fu_2893_p3;
wire   [25:0] add_ln1245_161_fu_2923_p2;
wire   [25:0] add_ln1245_162_fu_2939_p2;
wire   [25:0] add_ln1245_163_fu_2955_p2;
wire   [25:0] add_ln1245_164_fu_2971_p2;
wire   [13:0] trunc_ln1171_3_fu_2987_p1;
wire   [21:0] shl_ln1171_80_fu_2999_p3;
wire  signed [22:0] sext_ln1245_130_fu_3007_p1;
wire   [22:0] add_ln1245_165_fu_3011_p2;
wire  signed [25:0] sext_ln1245_131_fu_3017_p1;
wire   [25:0] shl_ln1171_79_fu_2991_p3;
wire   [25:0] add_ln1245_166_fu_3021_p2;
wire   [25:0] add_ln1245_167_fu_3037_p2;
wire   [25:0] add_ln1245_168_fu_3053_p2;
wire   [25:0] add_ln1245_169_fu_3069_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

algo_unpacked_mul_16s_16s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
mul_16s_16s_26_1_1_U691(
    .din0(p_read13),
    .din1(mul_ln1245_84_fu_186_p1),
    .dout(mul_ln1245_84_fu_186_p2)
);

algo_unpacked_mul_16s_14ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 26 ))
mul_16s_14ns_26_1_1_U692(
    .din0(p_read3),
    .din1(mul_ln1245_77_fu_187_p1),
    .dout(mul_ln1245_77_fu_187_p2)
);

algo_unpacked_mul_16s_14ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 26 ))
mul_16s_14ns_26_1_1_U693(
    .din0(p_read15),
    .din1(mul_ln1245_86_fu_190_p1),
    .dout(mul_ln1245_86_fu_190_p2)
);

algo_unpacked_mul_16s_14ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 26 ))
mul_16s_14ns_26_1_1_U694(
    .din0(p_read11),
    .din1(mul_ln1245_83_fu_194_p1),
    .dout(mul_ln1245_83_fu_194_p2)
);

algo_unpacked_mul_16s_14ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 26 ))
mul_16s_14ns_26_1_1_U695(
    .din0(p_read7),
    .din1(mul_ln1245_80_fu_204_p1),
    .dout(mul_ln1245_80_fu_204_p2)
);

algo_unpacked_mul_16s_16s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
mul_16s_16s_26_1_1_U696(
    .din0(p_read9),
    .din1(mul_ln1245_81_fu_208_p1),
    .dout(mul_ln1245_81_fu_208_p2)
);

algo_unpacked_mul_16s_12ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 26 ))
mul_16s_12ns_26_1_1_U697(
    .din0(p_read10),
    .din1(mul_ln1245_82_fu_209_p1),
    .dout(mul_ln1245_82_fu_209_p2)
);

algo_unpacked_mul_16s_16s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
mul_16s_16s_26_1_1_U698(
    .din0(p_read5),
    .din1(mul_ln1245_78_fu_215_p1),
    .dout(mul_ln1245_78_fu_215_p2)
);

algo_unpacked_mul_16s_16s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
mul_16s_16s_26_1_1_U699(
    .din0(p_read1),
    .din1(mul_ln1245_fu_216_p1),
    .dout(mul_ln1245_fu_216_p2)
);

algo_unpacked_mul_16s_12ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 26 ))
mul_16s_12ns_26_1_1_U700(
    .din0(p_read2),
    .din1(mul_ln1245_76_fu_217_p1),
    .dout(mul_ln1245_76_fu_217_p2)
);

algo_unpacked_mul_16s_12ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 26 ))
mul_16s_12ns_26_1_1_U701(
    .din0(p_read6),
    .din1(mul_ln1245_79_fu_226_p1),
    .dout(mul_ln1245_79_fu_226_p2)
);

algo_unpacked_mul_16s_12ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 26 ))
mul_16s_12ns_26_1_1_U702(
    .din0(p_read14),
    .din1(mul_ln1245_85_fu_230_p1),
    .dout(mul_ln1245_85_fu_230_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_port_reg_p_read <= p_read;
        ap_port_reg_p_read12 <= p_read12;
        ap_port_reg_p_read4 <= p_read4;
        ap_port_reg_p_read8 <= p_read8;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        mul_ln1245_76_reg_2588 <= mul_ln1245_76_fu_217_p2;
        mul_ln1245_77_reg_2592 <= mul_ln1245_77_fu_187_p2;
        mul_ln1245_78_reg_2596 <= mul_ln1245_78_fu_215_p2;
        mul_ln1245_79_reg_2600 <= mul_ln1245_79_fu_226_p2;
        mul_ln1245_80_reg_2604 <= mul_ln1245_80_fu_204_p2;
        mul_ln1245_81_reg_2608 <= mul_ln1245_81_fu_208_p2;
        mul_ln1245_82_reg_2612 <= mul_ln1245_82_fu_209_p2;
        mul_ln1245_83_reg_2616 <= mul_ln1245_83_fu_194_p2;
        mul_ln1245_84_reg_2620 <= mul_ln1245_84_fu_186_p2;
        mul_ln1245_85_reg_2624 <= mul_ln1245_85_fu_230_p2;
        mul_ln1245_86_reg_2628 <= mul_ln1245_86_fu_190_p2;
        mul_ln1245_reg_2584 <= mul_ln1245_fu_216_p2;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (1'b0 == ap_ce))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1245_151_fu_2717_p2 = ($signed(sext_ln1245_113_fu_2713_p1) + $signed(23'd7103488));

assign add_ln1245_152_fu_2743_p2 = ($signed(mul_ln1245_reg_2584) + $signed(26'd66747392));

assign add_ln1245_153_fu_2759_p2 = ($signed(mul_ln1245_76_reg_2588) + $signed(26'd66906112));

assign add_ln1245_154_fu_2775_p2 = ($signed(mul_ln1245_77_reg_2592) + $signed(26'd66304000));

assign add_ln1245_155_fu_2815_p2 = ($signed(sext_ln1245_117_fu_2811_p1) + $signed(23'd7103488));

assign add_ln1245_156_fu_2825_p2 = ($signed(sext_ln1245_118_fu_2821_p1) + $signed(shl_ln1171_75_fu_2795_p3));

assign add_ln1245_157_fu_2841_p2 = ($signed(mul_ln1245_78_reg_2596) + $signed(26'd66747392));

assign add_ln1245_158_fu_2857_p2 = ($signed(mul_ln1245_79_reg_2600) + $signed(26'd66906112));

assign add_ln1245_159_fu_2873_p2 = ($signed(mul_ln1245_80_reg_2604) + $signed(26'd66304000));

assign add_ln1245_160_fu_2913_p2 = ($signed(sext_ln1245_128_fu_2909_p1) + $signed(23'd7103488));

assign add_ln1245_161_fu_2923_p2 = ($signed(sext_ln1245_129_fu_2919_p1) + $signed(shl_ln1171_77_fu_2893_p3));

assign add_ln1245_162_fu_2939_p2 = ($signed(mul_ln1245_81_reg_2608) + $signed(26'd66747392));

assign add_ln1245_163_fu_2955_p2 = ($signed(mul_ln1245_82_reg_2612) + $signed(26'd66906112));

assign add_ln1245_164_fu_2971_p2 = ($signed(mul_ln1245_83_reg_2616) + $signed(26'd66304000));

assign add_ln1245_165_fu_3011_p2 = ($signed(sext_ln1245_130_fu_3007_p1) + $signed(23'd7103488));

assign add_ln1245_166_fu_3021_p2 = ($signed(sext_ln1245_131_fu_3017_p1) + $signed(shl_ln1171_79_fu_2991_p3));

assign add_ln1245_167_fu_3037_p2 = ($signed(mul_ln1245_84_reg_2620) + $signed(26'd66747392));

assign add_ln1245_168_fu_3053_p2 = ($signed(mul_ln1245_85_reg_2624) + $signed(26'd66906112));

assign add_ln1245_169_fu_3069_p2 = ($signed(mul_ln1245_86_reg_2628) + $signed(26'd66304000));

assign add_ln1245_fu_2727_p2 = ($signed(sext_ln1245_114_fu_2723_p1) + $signed(shl_ln_fu_2697_p3));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return_0 = {{add_ln1245_fu_2727_p2[25:10]}};

assign ap_return_1 = {{add_ln1245_152_fu_2743_p2[25:10]}};

assign ap_return_10 = {{add_ln1245_163_fu_2955_p2[25:10]}};

assign ap_return_11 = {{add_ln1245_164_fu_2971_p2[25:10]}};

assign ap_return_12 = {{add_ln1245_166_fu_3021_p2[25:10]}};

assign ap_return_13 = {{add_ln1245_167_fu_3037_p2[25:10]}};

assign ap_return_14 = {{add_ln1245_168_fu_3053_p2[25:10]}};

assign ap_return_15 = {{add_ln1245_169_fu_3069_p2[25:10]}};

assign ap_return_16 = 16'd711;

assign ap_return_17 = 16'd711;

assign ap_return_18 = 16'd711;

assign ap_return_19 = 16'd711;

assign ap_return_2 = {{add_ln1245_153_fu_2759_p2[25:10]}};

assign ap_return_20 = 16'd2380;

assign ap_return_21 = 16'd1397;

assign ap_return_22 = 16'd1986;

assign ap_return_23 = 16'd1544;

assign ap_return_24 = 16'd711;

assign ap_return_25 = 16'd711;

assign ap_return_26 = 16'd711;

assign ap_return_27 = 16'd711;

assign ap_return_28 = 16'd2380;

assign ap_return_29 = 16'd1397;

assign ap_return_3 = {{add_ln1245_154_fu_2775_p2[25:10]}};

assign ap_return_30 = 16'd1986;

assign ap_return_31 = 16'd1544;

assign ap_return_32 = 16'd711;

assign ap_return_33 = 16'd711;

assign ap_return_34 = 16'd711;

assign ap_return_35 = 16'd711;

assign ap_return_4 = {{add_ln1245_156_fu_2825_p2[25:10]}};

assign ap_return_5 = {{add_ln1245_157_fu_2841_p2[25:10]}};

assign ap_return_6 = {{add_ln1245_158_fu_2857_p2[25:10]}};

assign ap_return_7 = {{add_ln1245_159_fu_2873_p2[25:10]}};

assign ap_return_8 = {{add_ln1245_161_fu_2923_p2[25:10]}};

assign ap_return_9 = {{add_ln1245_162_fu_2939_p2[25:10]}};

assign mul_ln1245_76_fu_217_p1 = 26'd1953;

assign mul_ln1245_77_fu_187_p1 = 26'd4576;

assign mul_ln1245_78_fu_215_p1 = 26'd67089787;

assign mul_ln1245_79_fu_226_p1 = 26'd1953;

assign mul_ln1245_80_fu_204_p1 = 26'd4576;

assign mul_ln1245_81_fu_208_p1 = 26'd67089787;

assign mul_ln1245_82_fu_209_p1 = 26'd1953;

assign mul_ln1245_83_fu_194_p1 = 26'd4576;

assign mul_ln1245_84_fu_186_p1 = 26'd67089787;

assign mul_ln1245_85_fu_230_p1 = 26'd1953;

assign mul_ln1245_86_fu_190_p1 = 26'd4576;

assign mul_ln1245_fu_216_p1 = 26'd67089787;

assign sext_ln1245_113_fu_2713_p1 = $signed(shl_ln1171_s_fu_2705_p3);

assign sext_ln1245_114_fu_2723_p1 = $signed(add_ln1245_151_fu_2717_p2);

assign sext_ln1245_117_fu_2811_p1 = $signed(shl_ln1171_76_fu_2803_p3);

assign sext_ln1245_118_fu_2821_p1 = $signed(add_ln1245_155_fu_2815_p2);

assign sext_ln1245_128_fu_2909_p1 = $signed(shl_ln1171_78_fu_2901_p3);

assign sext_ln1245_129_fu_2919_p1 = $signed(add_ln1245_160_fu_2913_p2);

assign sext_ln1245_130_fu_3007_p1 = $signed(shl_ln1171_80_fu_2999_p3);

assign sext_ln1245_131_fu_3017_p1 = $signed(add_ln1245_165_fu_3011_p2);

assign shl_ln1171_75_fu_2795_p3 = {{trunc_ln1171_1_fu_2791_p1}, {12'd0}};

assign shl_ln1171_76_fu_2803_p3 = {{ap_port_reg_p_read4}, {6'd0}};

assign shl_ln1171_77_fu_2893_p3 = {{trunc_ln1171_2_fu_2889_p1}, {12'd0}};

assign shl_ln1171_78_fu_2901_p3 = {{ap_port_reg_p_read8}, {6'd0}};

assign shl_ln1171_79_fu_2991_p3 = {{trunc_ln1171_3_fu_2987_p1}, {12'd0}};

assign shl_ln1171_80_fu_2999_p3 = {{ap_port_reg_p_read12}, {6'd0}};

assign shl_ln1171_s_fu_2705_p3 = {{ap_port_reg_p_read}, {6'd0}};

assign shl_ln_fu_2697_p3 = {{trunc_ln1171_fu_2693_p1}, {12'd0}};

assign trunc_ln1171_1_fu_2791_p1 = ap_port_reg_p_read4[13:0];

assign trunc_ln1171_2_fu_2889_p1 = ap_port_reg_p_read8[13:0];

assign trunc_ln1171_3_fu_2987_p1 = ap_port_reg_p_read12[13:0];

assign trunc_ln1171_fu_2693_p1 = ap_port_reg_p_read[13:0];

endmodule //algo_unpacked_normalize_ap_fixed_ap_fixed_16_6_5_3_0_config11_s
