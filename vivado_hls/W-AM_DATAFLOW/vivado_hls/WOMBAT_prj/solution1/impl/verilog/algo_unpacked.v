// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="algo_unpacked_algo_unpacked,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690t-ffg1927-2,HLS_INPUT_CLOCK=6.250000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.794437,HLS_SYN_LAT=22,HLS_SYN_TPT=4,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=38861,HLS_SYN_LUT=89643,HLS_VERSION=2021_1}" *)

module algo_unpacked (
        link_in_0,
        link_in_1,
        link_in_2,
        link_in_3,
        link_in_4,
        link_in_5,
        link_in_6,
        link_in_7,
        link_in_8,
        link_in_9,
        link_in_10,
        link_in_11,
        link_in_12,
        link_in_13,
        link_in_14,
        link_in_15,
        link_in_16,
        link_in_17,
        link_in_18,
        link_in_19,
        link_in_20,
        link_in_21,
        link_in_22,
        link_in_23,
        link_in_24,
        link_in_25,
        link_in_26,
        link_in_27,
        link_in_28,
        link_in_29,
        link_in_30,
        link_in_31,
        link_in_32,
        link_in_33,
        link_in_34,
        link_in_35,
        link_out_i,
        link_out_o,
        ap_clk,
        ap_rst,
        ap_start,
        link_out_o_ap_vld,
        ap_done,
        ap_ready,
        ap_idle
);


input  [127:0] link_in_0;
input  [127:0] link_in_1;
input  [127:0] link_in_2;
input  [127:0] link_in_3;
input  [127:0] link_in_4;
input  [127:0] link_in_5;
input  [127:0] link_in_6;
input  [127:0] link_in_7;
input  [127:0] link_in_8;
input  [127:0] link_in_9;
input  [127:0] link_in_10;
input  [127:0] link_in_11;
input  [127:0] link_in_12;
input  [127:0] link_in_13;
input  [127:0] link_in_14;
input  [127:0] link_in_15;
input  [127:0] link_in_16;
input  [127:0] link_in_17;
input  [127:0] link_in_18;
input  [127:0] link_in_19;
input  [127:0] link_in_20;
input  [127:0] link_in_21;
input  [127:0] link_in_22;
input  [127:0] link_in_23;
input  [127:0] link_in_24;
input  [127:0] link_in_25;
input  [127:0] link_in_26;
input  [127:0] link_in_27;
input  [127:0] link_in_28;
input  [127:0] link_in_29;
input  [127:0] link_in_30;
input  [127:0] link_in_31;
input  [127:0] link_in_32;
input  [127:0] link_in_33;
input  [127:0] link_in_34;
input  [127:0] link_in_35;
input  [255:0] link_out_i;
output  [255:0] link_out_o;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   link_out_o_ap_vld;
output   ap_done;
output   ap_ready;
output   ap_idle;

wire    region_extraction_U0_ap_start;
wire    region_extraction_U0_ap_done;
wire    region_extraction_U0_ap_continue;
wire    region_extraction_U0_ap_idle;
wire    region_extraction_U0_ap_ready;
wire   [839:0] region_extraction_U0_ap_return;
wire    et_calo_ad_V_full_n;
wire    WOMBAT_U0_ap_continue;
wire    WOMBAT_U0_ap_start;
wire    WOMBAT_U0_ap_done;
wire    WOMBAT_U0_ap_idle;
wire    WOMBAT_U0_ap_ready;
wire   [63:0] WOMBAT_U0_ap_return;
wire    WOMBAT_out_V_full_n;
wire    output_assignment_U0_ap_start;
wire    output_assignment_U0_ap_done;
wire    output_assignment_U0_ap_continue;
wire    output_assignment_U0_ap_idle;
wire    output_assignment_U0_ap_ready;
wire   [127:0] output_assignment_U0_ap_return;
wire    tmp_link_out_V_0_full_n;
wire    write_link_out_U0_ap_start;
wire    write_link_out_U0_ap_done;
wire    write_link_out_U0_ap_continue;
wire    write_link_out_U0_ap_idle;
wire    write_link_out_U0_ap_ready;
wire   [255:0] write_link_out_U0_link_out_o;
wire    write_link_out_U0_link_out_o_ap_vld;
wire   [839:0] et_calo_ad_V_dout;
wire    et_calo_ad_V_empty_n;
wire   [63:0] WOMBAT_out_V_dout;
wire    WOMBAT_out_V_empty_n;
wire   [127:0] tmp_link_out_V_0_dout;
wire    tmp_link_out_V_0_empty_n;
wire    ap_sync_ready;
reg    ap_sync_reg_region_extraction_U0_ap_ready;
wire    ap_sync_region_extraction_U0_ap_ready;
reg    ap_sync_reg_write_link_out_U0_ap_ready;
wire    ap_sync_write_link_out_U0_ap_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_region_extraction_U0_ap_ready = 1'b0;
#0 ap_sync_reg_write_link_out_U0_ap_ready = 1'b0;
end

algo_unpacked_region_extraction region_extraction_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(region_extraction_U0_ap_start),
    .ap_done(region_extraction_U0_ap_done),
    .ap_continue(region_extraction_U0_ap_continue),
    .ap_idle(region_extraction_U0_ap_idle),
    .ap_ready(region_extraction_U0_ap_ready),
    .link_in_0(link_in_0),
    .link_in_1(link_in_1),
    .link_in_2(link_in_2),
    .link_in_3(link_in_3),
    .link_in_4(link_in_4),
    .link_in_5(link_in_5),
    .link_in_6(link_in_6),
    .link_in_7(link_in_7),
    .link_in_8(link_in_8),
    .link_in_9(link_in_9),
    .link_in_10(link_in_10),
    .link_in_11(link_in_11),
    .ap_return(region_extraction_U0_ap_return)
);

algo_unpacked_WOMBAT WOMBAT_U0(
    .ap_continue(WOMBAT_U0_ap_continue),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(WOMBAT_U0_ap_start),
    .ap_done(WOMBAT_U0_ap_done),
    .ap_idle(WOMBAT_U0_ap_idle),
    .ap_ready(WOMBAT_U0_ap_ready),
    .inputs_misc_v2_ft20_V_read(et_calo_ad_V_dout),
    .ap_return(WOMBAT_U0_ap_return)
);

algo_unpacked_output_assignment output_assignment_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(output_assignment_U0_ap_start),
    .ap_done(output_assignment_U0_ap_done),
    .ap_continue(output_assignment_U0_ap_continue),
    .ap_idle(output_assignment_U0_ap_idle),
    .ap_ready(output_assignment_U0_ap_ready),
    .WOMBAT_out_V_read(WOMBAT_out_V_dout),
    .ap_return(output_assignment_U0_ap_return)
);

algo_unpacked_write_link_out write_link_out_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(write_link_out_U0_ap_start),
    .ap_done(write_link_out_U0_ap_done),
    .ap_continue(write_link_out_U0_ap_continue),
    .ap_idle(write_link_out_U0_ap_idle),
    .ap_ready(write_link_out_U0_ap_ready),
    .p_read(tmp_link_out_V_0_dout),
    .link_out_i(link_out_i),
    .link_out_o(write_link_out_U0_link_out_o),
    .link_out_o_ap_vld(write_link_out_U0_link_out_o_ap_vld)
);

algo_unpacked_fifo_w840_d2_S et_calo_ad_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(region_extraction_U0_ap_return),
    .if_full_n(et_calo_ad_V_full_n),
    .if_write(region_extraction_U0_ap_done),
    .if_dout(et_calo_ad_V_dout),
    .if_empty_n(et_calo_ad_V_empty_n),
    .if_read(WOMBAT_U0_ap_ready)
);

algo_unpacked_fifo_w64_d2_S WOMBAT_out_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(WOMBAT_U0_ap_return),
    .if_full_n(WOMBAT_out_V_full_n),
    .if_write(WOMBAT_U0_ap_done),
    .if_dout(WOMBAT_out_V_dout),
    .if_empty_n(WOMBAT_out_V_empty_n),
    .if_read(output_assignment_U0_ap_ready)
);

algo_unpacked_fifo_w128_d2_S tmp_link_out_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(output_assignment_U0_ap_return),
    .if_full_n(tmp_link_out_V_0_full_n),
    .if_write(output_assignment_U0_ap_done),
    .if_dout(tmp_link_out_V_0_dout),
    .if_empty_n(tmp_link_out_V_0_empty_n),
    .if_read(write_link_out_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_region_extraction_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_region_extraction_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_region_extraction_U0_ap_ready <= ap_sync_region_extraction_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_write_link_out_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_write_link_out_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_write_link_out_U0_ap_ready <= ap_sync_write_link_out_U0_ap_ready;
        end
    end
end

assign WOMBAT_U0_ap_continue = WOMBAT_out_V_full_n;

assign WOMBAT_U0_ap_start = et_calo_ad_V_empty_n;

assign ap_done = write_link_out_U0_ap_done;

assign ap_idle = (write_link_out_U0_ap_idle & region_extraction_U0_ap_idle & output_assignment_U0_ap_idle & (1'b1 ^ WOMBAT_out_V_empty_n) & (tmp_link_out_V_0_empty_n ^ 1'b1) & (et_calo_ad_V_empty_n ^ 1'b1) & WOMBAT_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_ready = (ap_sync_write_link_out_U0_ap_ready & ap_sync_region_extraction_U0_ap_ready);

assign ap_sync_region_extraction_U0_ap_ready = (region_extraction_U0_ap_ready | ap_sync_reg_region_extraction_U0_ap_ready);

assign ap_sync_write_link_out_U0_ap_ready = (write_link_out_U0_ap_ready | ap_sync_reg_write_link_out_U0_ap_ready);

assign link_out_o = write_link_out_U0_link_out_o;

assign link_out_o_ap_vld = write_link_out_U0_link_out_o_ap_vld;

assign output_assignment_U0_ap_continue = tmp_link_out_V_0_full_n;

assign output_assignment_U0_ap_start = WOMBAT_out_V_empty_n;

assign region_extraction_U0_ap_continue = et_calo_ad_V_full_n;

assign region_extraction_U0_ap_start = ((ap_sync_reg_region_extraction_U0_ap_ready ^ 1'b1) & ap_start);

assign write_link_out_U0_ap_continue = 1'b1;

assign write_link_out_U0_ap_start = (tmp_link_out_V_0_empty_n & (ap_sync_reg_write_link_out_U0_ap_ready ^ 1'b1) & ap_start);

endmodule //algo_unpacked
