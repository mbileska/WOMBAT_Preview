-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity algo_unpacked_region_extraction is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    link_in_0 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_1 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_2 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_3 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_4 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_5 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_6 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_7 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_8 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_9 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_10 : IN STD_LOGIC_VECTOR (127 downto 0);
    link_in_11 : IN STD_LOGIC_VECTOR (127 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (839 downto 0) );
end;


architecture behav of algo_unpacked_region_extraction is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv840_lc_1 : STD_LOGIC_VECTOR (839 downto
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln315_82_fu_968_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_81_fu_958_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_80_fu_948_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_79_fu_938_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_78_fu_928_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_77_fu_918_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_76_fu_908_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_75_fu_898_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_74_fu_888_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_73_fu_878_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_72_fu_868_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_71_fu_858_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_70_fu_848_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_69_fu_838_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_68_fu_828_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_67_fu_818_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_66_fu_808_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_65_fu_798_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_64_fu_788_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_63_fu_778_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_62_fu_768_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_61_fu_758_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_60_fu_748_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_59_fu_738_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_58_fu_728_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_57_fu_718_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_56_fu_708_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_55_fu_698_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_54_fu_688_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_53_fu_678_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_52_fu_668_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_51_fu_658_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_50_fu_648_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_49_fu_638_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_48_fu_628_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_47_fu_618_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_46_fu_608_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_45_fu_598_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_44_fu_588_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_43_fu_578_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_42_fu_568_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_41_fu_558_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_40_fu_548_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_39_fu_538_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_38_fu_528_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_37_fu_518_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_36_fu_508_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_35_fu_498_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_34_fu_488_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_33_fu_478_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_32_fu_468_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_31_fu_458_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_30_fu_448_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_29_fu_438_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_28_fu_428_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_27_fu_418_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_26_fu_408_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_25_fu_398_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_24_fu_388_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_23_fu_378_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_22_fu_368_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_21_fu_358_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_20_fu_348_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_19_fu_338_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_18_fu_328_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_17_fu_318_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_16_fu_308_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_15_fu_298_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_14_fu_288_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_13_fu_278_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_12_fu_268_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_11_fu_258_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_10_fu_248_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_s_fu_238_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_9_fu_228_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_8_fu_218_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_7_fu_208_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_6_fu_198_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_5_fu_188_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_4_fu_178_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_3_fu_168_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_2_fu_158_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln315_1_fu_148_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln_fu_138_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal et_calo_ad_0_cast_fu_978_p85 : STD_LOGIC_VECTOR (839 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (839 downto
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv840_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_preg <= et_calo_ad_0_cast_fu_978_p85;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, et_calo_ad_0_cast_fu_978_p85, ap_return_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return <= et_calo_ad_0_cast_fu_978_p85;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    et_calo_ad_0_cast_fu_978_p85 <= (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((trunc_ln315_82_fu_968_p4 & trunc_ln315_81_fu_958_p4) & trunc_ln315_80_fu_948_p4) & trunc_ln315_79_fu_938_p4) & trunc_ln315_78_fu_928_p4) & trunc_ln315_77_fu_918_p4) & trunc_ln315_76_fu_908_p4) & trunc_ln315_75_fu_898_p4) & trunc_ln315_74_fu_888_p4) & trunc_ln315_73_fu_878_p4) & trunc_ln315_72_fu_868_p4) & trunc_ln315_71_fu_858_p4) & trunc_ln315_70_fu_848_p4) & trunc_ln315_69_fu_838_p4) & trunc_ln315_68_fu_828_p4) & trunc_ln315_67_fu_818_p4) & trunc_ln315_66_fu_808_p4) & trunc_ln315_65_fu_798_p4) & trunc_ln315_64_fu_788_p4) & trunc_ln315_63_fu_778_p4) & trunc_ln315_62_fu_768_p4) & trunc_ln315_61_fu_758_p4) & trunc_ln315_60_fu_748_p4) & trunc_ln315_59_fu_738_p4) & trunc_ln315_58_fu_728_p4) & trunc_ln315_57_fu_718_p4) & trunc_ln315_56_fu_708_p4) & trunc_ln315_55_fu_698_p4) & trunc_ln315_54_fu_688_p4) & trunc_ln315_53_fu_678_p4) & trunc_ln315_52_fu_668_p4) & trunc_ln315_51_fu_658_p4) & trunc_ln315_50_fu_648_p4) & trunc_ln315_49_fu_638_p4) & trunc_ln315_48_fu_628_p4) & trunc_ln315_47_fu_618_p4) & trunc_ln315_46_fu_608_p4) & trunc_ln315_45_fu_598_p4) & trunc_ln315_44_fu_588_p4) & trunc_ln315_43_fu_578_p4) & trunc_ln315_42_fu_568_p4) & trunc_ln315_41_fu_558_p4) & trunc_ln315_40_fu_548_p4) & trunc_ln315_39_fu_538_p4) & trunc_ln315_38_fu_528_p4) & trunc_ln315_37_fu_518_p4) & trunc_ln315_36_fu_508_p4) & trunc_ln315_35_fu_498_p4) & trunc_ln315_34_fu_488_p4) & trunc_ln315_33_fu_478_p4) & trunc_ln315_32_fu_468_p4) & trunc_ln315_31_fu_458_p4) & trunc_ln315_30_fu_448_p4) & trunc_ln315_29_fu_438_p4) & trunc_ln315_28_fu_428_p4) & trunc_ln315_27_fu_418_p4) & trunc_ln315_26_fu_408_p4) & trunc_ln315_25_fu_398_p4) & trunc_ln315_24_fu_388_p4) & trunc_ln315_23_fu_378_p4) & trunc_ln315_22_fu_368_p4) & trunc_ln315_21_fu_358_p4) & trunc_ln315_20_fu_348_p4) & trunc_ln315_19_fu_338_p4) & trunc_ln315_18_fu_328_p4) & trunc_ln315_17_fu_318_p4) & trunc_ln315_16_fu_308_p4) & trunc_ln315_15_fu_298_p4) & trunc_ln315_14_fu_288_p4) & trunc_ln315_13_fu_278_p4) & trunc_ln315_12_fu_268_p4) & trunc_ln315_11_fu_258_p4) & trunc_ln315_10_fu_248_p4) & trunc_ln315_s_fu_238_p4) & trunc_ln315_9_fu_228_p4) & trunc_ln315_8_fu_218_p4) & trunc_ln315_7_fu_208_p4) & trunc_ln315_6_fu_198_p4) & trunc_ln315_5_fu_188_p4) & trunc_ln315_4_fu_178_p4) & trunc_ln315_3_fu_168_p4) & trunc_ln315_2_fu_158_p4) & trunc_ln315_1_fu_148_p4) & trunc_ln_fu_138_p4);
    trunc_ln315_10_fu_248_p4 <= link_in_1(81 downto 72);
    trunc_ln315_11_fu_258_p4 <= link_in_1(97 downto 88);
    trunc_ln315_12_fu_268_p4 <= link_in_1(113 downto 104);
    trunc_ln315_13_fu_278_p4 <= link_in_2(17 downto 8);
    trunc_ln315_14_fu_288_p4 <= link_in_2(33 downto 24);
    trunc_ln315_15_fu_298_p4 <= link_in_2(49 downto 40);
    trunc_ln315_16_fu_308_p4 <= link_in_2(65 downto 56);
    trunc_ln315_17_fu_318_p4 <= link_in_2(81 downto 72);
    trunc_ln315_18_fu_328_p4 <= link_in_2(97 downto 88);
    trunc_ln315_19_fu_338_p4 <= link_in_2(113 downto 104);
    trunc_ln315_1_fu_148_p4 <= link_in_0(33 downto 24);
    trunc_ln315_20_fu_348_p4 <= link_in_3(17 downto 8);
    trunc_ln315_21_fu_358_p4 <= link_in_3(33 downto 24);
    trunc_ln315_22_fu_368_p4 <= link_in_3(49 downto 40);
    trunc_ln315_23_fu_378_p4 <= link_in_3(65 downto 56);
    trunc_ln315_24_fu_388_p4 <= link_in_3(81 downto 72);
    trunc_ln315_25_fu_398_p4 <= link_in_3(97 downto 88);
    trunc_ln315_26_fu_408_p4 <= link_in_3(113 downto 104);
    trunc_ln315_27_fu_418_p4 <= link_in_4(17 downto 8);
    trunc_ln315_28_fu_428_p4 <= link_in_4(33 downto 24);
    trunc_ln315_29_fu_438_p4 <= link_in_4(49 downto 40);
    trunc_ln315_2_fu_158_p4 <= link_in_0(49 downto 40);
    trunc_ln315_30_fu_448_p4 <= link_in_4(65 downto 56);
    trunc_ln315_31_fu_458_p4 <= link_in_4(81 downto 72);
    trunc_ln315_32_fu_468_p4 <= link_in_4(97 downto 88);
    trunc_ln315_33_fu_478_p4 <= link_in_4(113 downto 104);
    trunc_ln315_34_fu_488_p4 <= link_in_5(17 downto 8);
    trunc_ln315_35_fu_498_p4 <= link_in_5(33 downto 24);
    trunc_ln315_36_fu_508_p4 <= link_in_5(49 downto 40);
    trunc_ln315_37_fu_518_p4 <= link_in_5(65 downto 56);
    trunc_ln315_38_fu_528_p4 <= link_in_5(81 downto 72);
    trunc_ln315_39_fu_538_p4 <= link_in_5(97 downto 88);
    trunc_ln315_3_fu_168_p4 <= link_in_0(65 downto 56);
    trunc_ln315_40_fu_548_p4 <= link_in_5(113 downto 104);
    trunc_ln315_41_fu_558_p4 <= link_in_6(17 downto 8);
    trunc_ln315_42_fu_568_p4 <= link_in_6(33 downto 24);
    trunc_ln315_43_fu_578_p4 <= link_in_6(49 downto 40);
    trunc_ln315_44_fu_588_p4 <= link_in_6(65 downto 56);
    trunc_ln315_45_fu_598_p4 <= link_in_6(81 downto 72);
    trunc_ln315_46_fu_608_p4 <= link_in_6(97 downto 88);
    trunc_ln315_47_fu_618_p4 <= link_in_6(113 downto 104);
    trunc_ln315_48_fu_628_p4 <= link_in_7(17 downto 8);
    trunc_ln315_49_fu_638_p4 <= link_in_7(33 downto 24);
    trunc_ln315_4_fu_178_p4 <= link_in_0(81 downto 72);
    trunc_ln315_50_fu_648_p4 <= link_in_7(49 downto 40);
    trunc_ln315_51_fu_658_p4 <= link_in_7(65 downto 56);
    trunc_ln315_52_fu_668_p4 <= link_in_7(81 downto 72);
    trunc_ln315_53_fu_678_p4 <= link_in_7(97 downto 88);
    trunc_ln315_54_fu_688_p4 <= link_in_7(113 downto 104);
    trunc_ln315_55_fu_698_p4 <= link_in_8(17 downto 8);
    trunc_ln315_56_fu_708_p4 <= link_in_8(33 downto 24);
    trunc_ln315_57_fu_718_p4 <= link_in_8(49 downto 40);
    trunc_ln315_58_fu_728_p4 <= link_in_8(65 downto 56);
    trunc_ln315_59_fu_738_p4 <= link_in_8(81 downto 72);
    trunc_ln315_5_fu_188_p4 <= link_in_0(97 downto 88);
    trunc_ln315_60_fu_748_p4 <= link_in_8(97 downto 88);
    trunc_ln315_61_fu_758_p4 <= link_in_8(113 downto 104);
    trunc_ln315_62_fu_768_p4 <= link_in_9(17 downto 8);
    trunc_ln315_63_fu_778_p4 <= link_in_9(33 downto 24);
    trunc_ln315_64_fu_788_p4 <= link_in_9(49 downto 40);
    trunc_ln315_65_fu_798_p4 <= link_in_9(65 downto 56);
    trunc_ln315_66_fu_808_p4 <= link_in_9(81 downto 72);
    trunc_ln315_67_fu_818_p4 <= link_in_9(97 downto 88);
    trunc_ln315_68_fu_828_p4 <= link_in_9(113 downto 104);
    trunc_ln315_69_fu_838_p4 <= link_in_10(17 downto 8);
    trunc_ln315_6_fu_198_p4 <= link_in_0(113 downto 104);
    trunc_ln315_70_fu_848_p4 <= link_in_10(33 downto 24);
    trunc_ln315_71_fu_858_p4 <= link_in_10(49 downto 40);
    trunc_ln315_72_fu_868_p4 <= link_in_10(65 downto 56);
    trunc_ln315_73_fu_878_p4 <= link_in_10(81 downto 72);
    trunc_ln315_74_fu_888_p4 <= link_in_10(97 downto 88);
    trunc_ln315_75_fu_898_p4 <= link_in_10(113 downto 104);
    trunc_ln315_76_fu_908_p4 <= link_in_11(17 downto 8);
    trunc_ln315_77_fu_918_p4 <= link_in_11(33 downto 24);
    trunc_ln315_78_fu_928_p4 <= link_in_11(49 downto 40);
    trunc_ln315_79_fu_938_p4 <= link_in_11(65 downto 56);
    trunc_ln315_7_fu_208_p4 <= link_in_1(17 downto 8);
    trunc_ln315_80_fu_948_p4 <= link_in_11(81 downto 72);
    trunc_ln315_81_fu_958_p4 <= link_in_11(97 downto 88);
    trunc_ln315_82_fu_968_p4 <= link_in_11(113 downto 104);
    trunc_ln315_8_fu_218_p4 <= link_in_1(33 downto 24);
    trunc_ln315_9_fu_228_p4 <= link_in_1(49 downto 40);
    trunc_ln315_s_fu_238_p4 <= link_in_1(65 downto 56);
    trunc_ln_fu_138_p4 <= link_in_0(17 downto 8);
end behav;
