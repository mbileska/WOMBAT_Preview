-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity algo_unpacked_normalize_ap_fixed_ap_fixed_16_6_5_3_0_config11_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_30 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_31 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_32 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_33 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_34 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_35 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of algo_unpacked_normalize_ap_fixed_ap_fixed_16_6_5_3_0_config11_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv26_3FFB57B : STD_LOGIC_VECTOR (25 downto 0) := "11111111111011010101111011";
    constant ap_const_lv26_11E0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000111100000";
    constant ap_const_lv26_7A1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011110100001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv26_3EC6400 : STD_LOGIC_VECTOR (25 downto 0) := "11111011000110010000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv26_3FA7C00 : STD_LOGIC_VECTOR (25 downto 0) := "11111110100111110000000000";
    constant ap_const_lv26_3FCE800 : STD_LOGIC_VECTOR (25 downto 0) := "11111111001110100000000000";
    constant ap_const_lv26_3F3B800 : STD_LOGIC_VECTOR (25 downto 0) := "11111100111011100000000000";
    constant ap_const_lv16_2C7 : STD_LOGIC_VECTOR (15 downto 0) := "0000001011000111";
    constant ap_const_lv16_2CB : STD_LOGIC_VECTOR (15 downto 0) := "0000001011001011";
    constant ap_const_lv16_2BF : STD_LOGIC_VECTOR (15 downto 0) := "0000001010111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mul_ln1245_fu_212_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_reg_2580 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_76_fu_213_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_76_reg_2584 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_77_fu_183_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_77_reg_2588 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_78_fu_211_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_78_reg_2592 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_79_fu_222_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_79_reg_2596 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_80_fu_200_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_80_reg_2600 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_81_fu_204_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_81_reg_2604 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_82_fu_205_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_82_reg_2608 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_83_fu_190_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_83_reg_2612 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_84_fu_182_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_84_reg_2616 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_85_fu_226_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_85_reg_2620 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_86_fu_186_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1245_86_reg_2624 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_port_reg_p_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_p_read4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_p_read8 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_p_read12 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln1245_84_fu_182_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1245_77_fu_183_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1245_86_fu_186_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1245_83_fu_190_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1245_80_fu_200_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1245_81_fu_204_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1245_82_fu_205_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1245_78_fu_211_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1245_fu_212_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1245_76_fu_213_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1245_79_fu_222_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1245_85_fu_226_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1171_fu_2689_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln1171_s_fu_2701_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln_fu_2693_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1171_fu_2709_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1171_fu_2713_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1245_fu_2719_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1245_151_fu_2735_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1245_152_fu_2751_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1245_153_fu_2767_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln1171_1_fu_2783_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln1171_76_fu_2795_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1171_75_fu_2787_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1171_95_fu_2803_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1171_1_fu_2807_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1245_154_fu_2813_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1245_155_fu_2829_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1245_156_fu_2845_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1245_157_fu_2861_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln1171_2_fu_2877_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln1171_78_fu_2889_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1171_77_fu_2881_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1171_96_fu_2897_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1171_2_fu_2901_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1245_158_fu_2907_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1245_159_fu_2923_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1245_160_fu_2939_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1245_161_fu_2955_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln1171_3_fu_2971_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln1171_80_fu_2983_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1171_79_fu_2975_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1171_97_fu_2991_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1171_3_fu_2995_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1245_162_fu_3001_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1245_163_fu_3017_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1245_164_fu_3033_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1245_165_fu_3049_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component algo_unpacked_mul_16s_16s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component algo_unpacked_mul_16s_14ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component algo_unpacked_mul_16s_12ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    mul_16s_16s_26_1_1_U679 : component algo_unpacked_mul_16s_16s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => p_read13,
        din1 => mul_ln1245_84_fu_182_p1,
        dout => mul_ln1245_84_fu_182_p2);

    mul_16s_14ns_26_1_1_U680 : component algo_unpacked_mul_16s_14ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 26)
    port map (
        din0 => p_read3,
        din1 => mul_ln1245_77_fu_183_p1,
        dout => mul_ln1245_77_fu_183_p2);

    mul_16s_14ns_26_1_1_U681 : component algo_unpacked_mul_16s_14ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 26)
    port map (
        din0 => p_read15,
        din1 => mul_ln1245_86_fu_186_p1,
        dout => mul_ln1245_86_fu_186_p2);

    mul_16s_14ns_26_1_1_U682 : component algo_unpacked_mul_16s_14ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 26)
    port map (
        din0 => p_read11,
        din1 => mul_ln1245_83_fu_190_p1,
        dout => mul_ln1245_83_fu_190_p2);

    mul_16s_14ns_26_1_1_U683 : component algo_unpacked_mul_16s_14ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 26)
    port map (
        din0 => p_read7,
        din1 => mul_ln1245_80_fu_200_p1,
        dout => mul_ln1245_80_fu_200_p2);

    mul_16s_16s_26_1_1_U684 : component algo_unpacked_mul_16s_16s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => p_read9,
        din1 => mul_ln1245_81_fu_204_p1,
        dout => mul_ln1245_81_fu_204_p2);

    mul_16s_12ns_26_1_1_U685 : component algo_unpacked_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => p_read10,
        din1 => mul_ln1245_82_fu_205_p1,
        dout => mul_ln1245_82_fu_205_p2);

    mul_16s_16s_26_1_1_U686 : component algo_unpacked_mul_16s_16s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => p_read5,
        din1 => mul_ln1245_78_fu_211_p1,
        dout => mul_ln1245_78_fu_211_p2);

    mul_16s_16s_26_1_1_U687 : component algo_unpacked_mul_16s_16s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => p_read1,
        din1 => mul_ln1245_fu_212_p1,
        dout => mul_ln1245_fu_212_p2);

    mul_16s_12ns_26_1_1_U688 : component algo_unpacked_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => p_read2,
        din1 => mul_ln1245_76_fu_213_p1,
        dout => mul_ln1245_76_fu_213_p2);

    mul_16s_12ns_26_1_1_U689 : component algo_unpacked_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => p_read6,
        din1 => mul_ln1245_79_fu_222_p1,
        dout => mul_ln1245_79_fu_222_p2);

    mul_16s_12ns_26_1_1_U690 : component algo_unpacked_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => p_read14,
        din1 => mul_ln1245_85_fu_226_p1,
        dout => mul_ln1245_85_fu_226_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ap_port_reg_p_read <= p_read;
                ap_port_reg_p_read12 <= p_read12;
                ap_port_reg_p_read4 <= p_read4;
                ap_port_reg_p_read8 <= p_read8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                mul_ln1245_76_reg_2584 <= mul_ln1245_76_fu_213_p2;
                mul_ln1245_77_reg_2588 <= mul_ln1245_77_fu_183_p2;
                mul_ln1245_78_reg_2592 <= mul_ln1245_78_fu_211_p2;
                mul_ln1245_79_reg_2596 <= mul_ln1245_79_fu_222_p2;
                mul_ln1245_80_reg_2600 <= mul_ln1245_80_fu_200_p2;
                mul_ln1245_81_reg_2604 <= mul_ln1245_81_fu_204_p2;
                mul_ln1245_82_reg_2608 <= mul_ln1245_82_fu_205_p2;
                mul_ln1245_83_reg_2612 <= mul_ln1245_83_fu_190_p2;
                mul_ln1245_84_reg_2616 <= mul_ln1245_84_fu_182_p2;
                mul_ln1245_85_reg_2620 <= mul_ln1245_85_fu_226_p2;
                mul_ln1245_86_reg_2624 <= mul_ln1245_86_fu_186_p2;
                mul_ln1245_reg_2580 <= mul_ln1245_fu_212_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln1171_1_fu_2807_p2 <= std_logic_vector(unsigned(shl_ln1171_75_fu_2787_p3) + unsigned(sext_ln1171_95_fu_2803_p1));
    add_ln1171_2_fu_2901_p2 <= std_logic_vector(unsigned(shl_ln1171_77_fu_2881_p3) + unsigned(sext_ln1171_96_fu_2897_p1));
    add_ln1171_3_fu_2995_p2 <= std_logic_vector(unsigned(shl_ln1171_79_fu_2975_p3) + unsigned(sext_ln1171_97_fu_2991_p1));
    add_ln1171_fu_2713_p2 <= std_logic_vector(unsigned(shl_ln_fu_2693_p3) + unsigned(sext_ln1171_fu_2709_p1));
    add_ln1245_151_fu_2735_p2 <= std_logic_vector(unsigned(mul_ln1245_reg_2580) + unsigned(ap_const_lv26_3FA7C00));
    add_ln1245_152_fu_2751_p2 <= std_logic_vector(unsigned(mul_ln1245_76_reg_2584) + unsigned(ap_const_lv26_3FCE800));
    add_ln1245_153_fu_2767_p2 <= std_logic_vector(unsigned(mul_ln1245_77_reg_2588) + unsigned(ap_const_lv26_3F3B800));
    add_ln1245_154_fu_2813_p2 <= std_logic_vector(unsigned(add_ln1171_1_fu_2807_p2) + unsigned(ap_const_lv26_3EC6400));
    add_ln1245_155_fu_2829_p2 <= std_logic_vector(unsigned(mul_ln1245_78_reg_2592) + unsigned(ap_const_lv26_3FA7C00));
    add_ln1245_156_fu_2845_p2 <= std_logic_vector(unsigned(mul_ln1245_79_reg_2596) + unsigned(ap_const_lv26_3FCE800));
    add_ln1245_157_fu_2861_p2 <= std_logic_vector(unsigned(mul_ln1245_80_reg_2600) + unsigned(ap_const_lv26_3F3B800));
    add_ln1245_158_fu_2907_p2 <= std_logic_vector(unsigned(add_ln1171_2_fu_2901_p2) + unsigned(ap_const_lv26_3EC6400));
    add_ln1245_159_fu_2923_p2 <= std_logic_vector(unsigned(mul_ln1245_81_reg_2604) + unsigned(ap_const_lv26_3FA7C00));
    add_ln1245_160_fu_2939_p2 <= std_logic_vector(unsigned(mul_ln1245_82_reg_2608) + unsigned(ap_const_lv26_3FCE800));
    add_ln1245_161_fu_2955_p2 <= std_logic_vector(unsigned(mul_ln1245_83_reg_2612) + unsigned(ap_const_lv26_3F3B800));
    add_ln1245_162_fu_3001_p2 <= std_logic_vector(unsigned(add_ln1171_3_fu_2995_p2) + unsigned(ap_const_lv26_3EC6400));
    add_ln1245_163_fu_3017_p2 <= std_logic_vector(unsigned(mul_ln1245_84_reg_2616) + unsigned(ap_const_lv26_3FA7C00));
    add_ln1245_164_fu_3033_p2 <= std_logic_vector(unsigned(mul_ln1245_85_reg_2620) + unsigned(ap_const_lv26_3FCE800));
    add_ln1245_165_fu_3049_p2 <= std_logic_vector(unsigned(mul_ln1245_86_reg_2624) + unsigned(ap_const_lv26_3F3B800));
    add_ln1245_fu_2719_p2 <= std_logic_vector(unsigned(add_ln1171_fu_2713_p2) + unsigned(ap_const_lv26_3EC6400));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= add_ln1245_fu_2719_p2(25 downto 10);
    ap_return_1 <= add_ln1245_151_fu_2735_p2(25 downto 10);
    ap_return_10 <= add_ln1245_160_fu_2939_p2(25 downto 10);
    ap_return_11 <= add_ln1245_161_fu_2955_p2(25 downto 10);
    ap_return_12 <= add_ln1245_162_fu_3001_p2(25 downto 10);
    ap_return_13 <= add_ln1245_163_fu_3017_p2(25 downto 10);
    ap_return_14 <= add_ln1245_164_fu_3033_p2(25 downto 10);
    ap_return_15 <= add_ln1245_165_fu_3049_p2(25 downto 10);
    ap_return_16 <= ap_const_lv16_2C7;
    ap_return_17 <= ap_const_lv16_2C7;
    ap_return_18 <= ap_const_lv16_2C7;
    ap_return_19 <= ap_const_lv16_2C7;
    ap_return_2 <= add_ln1245_152_fu_2751_p2(25 downto 10);
    ap_return_20 <= ap_const_lv16_2CB;
    ap_return_21 <= ap_const_lv16_2BF;
    ap_return_22 <= ap_const_lv16_2CB;
    ap_return_23 <= ap_const_lv16_2C7;
    ap_return_24 <= ap_const_lv16_2C7;
    ap_return_25 <= ap_const_lv16_2C7;
    ap_return_26 <= ap_const_lv16_2C7;
    ap_return_27 <= ap_const_lv16_2C7;
    ap_return_28 <= ap_const_lv16_2CB;
    ap_return_29 <= ap_const_lv16_2BF;
    ap_return_3 <= add_ln1245_153_fu_2767_p2(25 downto 10);
    ap_return_30 <= ap_const_lv16_2CB;
    ap_return_31 <= ap_const_lv16_2C7;
    ap_return_32 <= ap_const_lv16_2C7;
    ap_return_33 <= ap_const_lv16_2C7;
    ap_return_34 <= ap_const_lv16_2C7;
    ap_return_35 <= ap_const_lv16_2C7;
    ap_return_4 <= add_ln1245_154_fu_2813_p2(25 downto 10);
    ap_return_5 <= add_ln1245_155_fu_2829_p2(25 downto 10);
    ap_return_6 <= add_ln1245_156_fu_2845_p2(25 downto 10);
    ap_return_7 <= add_ln1245_157_fu_2861_p2(25 downto 10);
    ap_return_8 <= add_ln1245_158_fu_2907_p2(25 downto 10);
    ap_return_9 <= add_ln1245_159_fu_2923_p2(25 downto 10);
    mul_ln1245_76_fu_213_p1 <= ap_const_lv26_7A1(12 - 1 downto 0);
    mul_ln1245_77_fu_183_p1 <= ap_const_lv26_11E0(14 - 1 downto 0);
    mul_ln1245_78_fu_211_p1 <= ap_const_lv26_3FFB57B(16 - 1 downto 0);
    mul_ln1245_79_fu_222_p1 <= ap_const_lv26_7A1(12 - 1 downto 0);
    mul_ln1245_80_fu_200_p1 <= ap_const_lv26_11E0(14 - 1 downto 0);
    mul_ln1245_81_fu_204_p1 <= ap_const_lv26_3FFB57B(16 - 1 downto 0);
    mul_ln1245_82_fu_205_p1 <= ap_const_lv26_7A1(12 - 1 downto 0);
    mul_ln1245_83_fu_190_p1 <= ap_const_lv26_11E0(14 - 1 downto 0);
    mul_ln1245_84_fu_182_p1 <= ap_const_lv26_3FFB57B(16 - 1 downto 0);
    mul_ln1245_85_fu_226_p1 <= ap_const_lv26_7A1(12 - 1 downto 0);
    mul_ln1245_86_fu_186_p1 <= ap_const_lv26_11E0(14 - 1 downto 0);
    mul_ln1245_fu_212_p1 <= ap_const_lv26_3FFB57B(16 - 1 downto 0);
        sext_ln1171_95_fu_2803_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1171_76_fu_2795_p3),26));

        sext_ln1171_96_fu_2897_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1171_78_fu_2889_p3),26));

        sext_ln1171_97_fu_2991_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1171_80_fu_2983_p3),26));

        sext_ln1171_fu_2709_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1171_s_fu_2701_p3),26));

    shl_ln1171_75_fu_2787_p3 <= (trunc_ln1171_1_fu_2783_p1 & ap_const_lv12_0);
    shl_ln1171_76_fu_2795_p3 <= (ap_port_reg_p_read4 & ap_const_lv6_0);
    shl_ln1171_77_fu_2881_p3 <= (trunc_ln1171_2_fu_2877_p1 & ap_const_lv12_0);
    shl_ln1171_78_fu_2889_p3 <= (ap_port_reg_p_read8 & ap_const_lv6_0);
    shl_ln1171_79_fu_2975_p3 <= (trunc_ln1171_3_fu_2971_p1 & ap_const_lv12_0);
    shl_ln1171_80_fu_2983_p3 <= (ap_port_reg_p_read12 & ap_const_lv6_0);
    shl_ln1171_s_fu_2701_p3 <= (ap_port_reg_p_read & ap_const_lv6_0);
    shl_ln_fu_2693_p3 <= (trunc_ln1171_fu_2689_p1 & ap_const_lv12_0);
    trunc_ln1171_1_fu_2783_p1 <= ap_port_reg_p_read4(14 - 1 downto 0);
    trunc_ln1171_2_fu_2877_p1 <= ap_port_reg_p_read8(14 - 1 downto 0);
    trunc_ln1171_3_fu_2971_p1 <= ap_port_reg_p_read12(14 - 1 downto 0);
    trunc_ln1171_fu_2689_p1 <= ap_port_reg_p_read(14 - 1 downto 0);
end behav;
